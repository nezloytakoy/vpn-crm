import { Bot, webhookCallback, Context, InlineKeyboard } from 'grammy';
import { PrismaClient } from '@prisma/client';
import { Prisma } from '@prisma/client';
import axios from 'axios';
import { InputFile } from 'grammy';


const token = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
if (!token) throw new Error('TELEGRAM_SUPPORT_BOT_TOKEN not found.');

const bot = new Bot(token);
const prisma = new PrismaClient();

const assistantBot = new Bot(process.env.TELEGRAM_SUPPORT_BOT_TOKEN || "");

const userBot = new Bot(process.env.TELEGRAM_USER_BOT_TOKEN!);


type TelegramButton = {
  text: string;
  callback_data: string;
};


async function sendTelegramMessageWithButtons(chatId: string, text: string, buttons: TelegramButton[]) {
  const botToken = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_markup: {
        inline_keyboard: buttons.map((button) => [{ text: button.text, callback_data: button.callback_data }]),
      },
    }),
  });
}


async function sendTelegramMessageToUser(chatId: string, text: string) {
  const botToken = process.env.TELEGRAM_USER_BOT_TOKEN;
  if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_USER_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text }),
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.statusText}`);
    }

    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: ${chatId}`);

    const userTelegramId = BigInt(chatId);


    const activeConversation = await prisma.conversation.findFirst({
      where: {
        userId: userTelegramId,
        status: 'IN_PROGRESS',
      },
    });

    if (activeConversation) {
      const currentTime = new Date();


      if (activeConversation.lastMessageFrom === 'USER' && activeConversation.lastUserMessageAt) {
        const lastUserMessageTime = new Date(activeConversation.lastUserMessageAt).getTime();
        const responseTime = currentTime.getTime() - lastUserMessageTime;

        const responseTimesArray: Prisma.JsonArray = Array.isArray(activeConversation.assistantResponseTimes)
          ? activeConversation.assistantResponseTimes as Prisma.JsonArray
          : [];


        responseTimesArray.push(responseTime);


        const newAssistantMessage = {
          sender: 'ASSISTANT',
          message: text,
          timestamp: currentTime.toISOString(),
        };


        const updatedMessages = [
          ...(activeConversation.messages as Array<{ sender: string; message: string; timestamp: string }>),
          newAssistantMessage,
        ];


        await prisma.conversation.update({
          where: { id: activeConversation.id },
          data: {
            lastMessageFrom: 'ASSISTANT',
            assistantResponseTimes: responseTimesArray,
            messages: updatedMessages,
          },
        });
      } else {

        const newAssistantMessage = {
          sender: 'ASSISTANT',
          message: text,
          timestamp: currentTime.toISOString(),
        };


        const updatedMessages = [
          ...(activeConversation.messages as Array<{ sender: string; message: string; timestamp: string }>),
          newAssistantMessage,
        ];


        await prisma.conversation.update({
          where: { id: activeConversation.id },
          data: {
            lastMessageFrom: 'ASSISTANT',
            messages: updatedMessages,
          },
        });
      }
    } else {
      console.error('–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
  }
}




type TranslationKey = keyof typeof translations["en"];

const getTranslation = (lang: "en" | "ru", key: TranslationKey) => {
  return translations[lang][key] || translations["en"][key];
};

const translations = {
  en: {
    end_dialog_error: "Error: could not get your Telegram ID.",
    no_active_requests: "‚ö†Ô∏è You have no active requests.",
    dialog_closed: "The dialog with the user has been closed.",
    assistant_finished_dialog: "The assistant has finished the dialog.",
    start_invalid_link: "‚ùå The link is invalid or has already been used.",
    assistant_congrats: "üéâ Congratulations, you are now an assistant!",
    start_message: "üëã This is the support bot! Use a valid invite link to access the functionality.",
    menu_message: "üìã Main menu:",
    start_work: "üöÄ Start working!",
    my_coins: "üí∞ My coins",
    my_activity: "üìä My activity",
    already_working: "‚ö†Ô∏è You are already working!",
    work_started: "üöÄ Work started! To end, use the /end_work command.",
    end_work: "üö™ Work finished!",
    no_working_status: "‚ö†Ô∏è You are not working at the moment!",
    accept_request: "‚úÖ You have accepted the request. Please wait for the user's question.",
    reject_request: "‚ùå You have rejected the request.",
    send_message_error: "Please send a text message.",
    no_user_requests: "‚ö†Ô∏è You have no active user requests.",
    error_processing_message: "An error occurred while processing your message. Please try again later.",
    active_dialog_exists: "‚ö†Ô∏è You have an active dialog. Please finish it before ending work.",
    assistantRequestMessage: "User request for conversation",
    accept: "Accept",
    reject: "Reject",
    requestSent: "The request has been sent to the assistant.",
    active_requests_list: "üìÑ Here is the list of active user requests:",
    server_error: "‚ö†Ô∏è An error occurred on the server. Please try again later.",
    no_message: "No message provided.",
    no_assistant_found: "‚ùå Assistant not found.",
    request_not_found_or_not_assigned: "‚ùå Request not found or not assigned to you.",
    activated_request_with_subject: "Activated request with subject",
    now_chatting_with_user: "Now chatting with user",
    request_withdrawal: "Request withdrawal",
    total_conversations: "Total conversations",
    conversations_last_24_hours: "Conversations in the last 24 hours",
    ignored_requests: "Ignored requests",
    rejected_requests: "Rejected requests",
    complaints_last_24_hours: "Complaints in the last 24 hours",
    view_limits: "View limits",
    complaint_pending: "Complaint is pending. You cannot withdraw until it is resolved.",
    balance_frozen: "Your balance is frozen for 24 hours due to low activity.",
    withdrawal_request_sent: "Withdrawal request sent.",
    withdrawal_request_created: "Your withdrawal request has been created successfully.",
    limits_info: "If skipped requests exceed 3 or rejections exceed 10 in a day, your activity will decrease, and your balance will be frozen for 24 hours. Complaints also pause withdrawals until resolved.",
    unknown_action: "Unknown action.",
    topic: "Topic",
    no_subject: "No subject",

    blocked_until: "You are blocked by the administrator, you will be unblocked in %time%h.",
    block_time_expired: "The block time has expired, you can continue using the bot.",
    blocked_permanently: "You have been blocked by the administrator with no set unblock date.",
    request_with_time: "Request %id%: %subject% | Remaining: %time%",
    request_subject: "Request subject: %subject%",
    new_user_message: "New message from the user",
    no_more_assistants: "The connection with the assistant was lost, and there are no more assistants available.",
    reassign_request_error: "‚ùå An error occurred while reassigning the request.",
    end_work_confirm: "End work",
    end_work_cancel: "Return to work",
    active_dialogs_blocking_warning: "You have active dialogs. If you end work, you will not receive coins and will be blocked until reviewed by the administrator. End work?",
    work_finished_blocked: "Work finished. You will not receive a reward and your account will be blocked until reviewed by the administration.",
    assistant_lost_connecting_new: "Connection with the assistant lost, connecting another assistant...",
    accept_request_confirm: "‚úÖ You have accepted the request.",
    assistant_joined_chat: "The assistant has joined the chat. Please formulate your question.",
    request_already_in_progress: "‚ùå This request is already in progress or has been completed.",
    another_assistant_accepted: "‚ùå Another assistant has already accepted the request.",
    exceeded_reject_limit: "üö´ You have exceeded the rejection limit and have been blocked for 24 hours.",
    request_subject_from_user: "User request subject",
    request_subject_prefix: "Request subject: %subject%",
    rejected_request_reassigned: "‚ùå You have rejected the request. A new assistant has been notified.",
    rejected_request_no_assistants: "‚ùå You have rejected the request, but there are no more assistants available.",
    rejected_request_error: "‚ùå An error occurred while rejecting the request.",
    session_time_remaining: "--------------------------------\n%minutes% minutes remain until the end of the session",

    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π –∫–ª—é—á:
    assistant_declined_extension: "The assistant declined the session extension."
  },

  ru: {
    end_dialog_error: "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.",
    no_active_requests: "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
    dialog_closed: "–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω.",
    assistant_finished_dialog: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.",
    start_invalid_link: "‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.",
    assistant_congrats: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Å—Ç–∞–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!",
    start_message: "üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.",
    menu_message: "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    start_work: "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
    my_coins: "üí∞ –ú–æ–∏ –∫–æ–∏–Ω—ã",
    my_activity: "üìä –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    already_working: "‚ö†Ô∏è –í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!",
    work_started: "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞! –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /offline.",
    end_work: "üö™ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
    no_working_status: "‚ö†Ô∏è –í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!",
    accept_request: "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    reject_request: "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.",
    send_message_error: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    no_user_requests: "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
    error_processing_message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
    active_dialog_exists: "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É.",
    assistantRequestMessage: "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä",
    accept: "–ü—Ä–∏–Ω—è—Ç—å",
    reject: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
    requestSent: "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.",
    active_requests_list: "üìÑ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
    server_error: "‚ö†Ô∏è –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    no_message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
    no_assistant_found: "‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    request_not_found_or_not_assigned: "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º.",
    activated_request_with_subject: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º–æ–π",
    now_chatting_with_user: "–°–µ–π—á–∞—Å –æ–±—â–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
    request_withdrawal: "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥",
    total_conversations: "–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤",
    conversations_last_24_hours: "–î–∏–∞–ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
    ignored_requests: "–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
    rejected_requests: "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
    complaints_last_24_hours: "–ñ–∞–ª–æ–±—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
    view_limits: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–º–∏—Ç—ã",
    complaint_pending: "–ù–∞ –≤–∞—Å –Ω–∞–ø–∏—Å–∞–Ω–∞ –∂–∞–ª–æ–±–∞. –í—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞ –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞.",
    balance_frozen: "–í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞–º–æ—Ä–æ–∂–µ–Ω –Ω–∞ 24 —á–∞—Å–∞ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
    withdrawal_request_sent: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
    withdrawal_request_created: "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.",
    limits_info: "–ï—Å–ª–∏ –∑–∞ —Å—É—Ç–∫–∏ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –±–æ–ª–µ–µ 3 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –±–æ–ª–µ–µ 10, –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∑–∏—Ç—Å—è, –∏ –±–∞–ª–∞–Ω—Å –∑–∞–º–æ—Ä–æ–∑–∏—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞. –ñ–∞–ª–æ–±—ã —Ç–∞–∫–∂–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É—é—Ç –≤—ã–≤–æ–¥ –¥–æ –∏—Ö —Ä–µ—à–µ–Ω–∏—è.",
    unknown_action: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
    topic: "–¢–µ–º–∞",
    no_subject: "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",

    blocked_until: "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å %time%—á.",
    block_time_expired: "–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã—à–ª–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
    blocked_permanently: "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–µ–∑ —Å—Ä–æ–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
    request_with_time: "–ó–∞–ø—Ä–æ—Å %id%: %subject% | –û—Å—Ç–∞–ª–æ—Å—å: %time%",
    request_subject: "–¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞: %subject%",
    new_user_message: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    no_more_assistants: "–°–≤—è–∑—å —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–æ—Ç–µ—Ä—è–Ω–∞, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.",
    reassign_request_error: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.",
    end_work_confirm: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
    end_work_cancel: "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ",
    active_dialogs_blocking_warning: "–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏. –ï—Å–ª–∏ –≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É, –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–∏–Ω–æ–≤ –∏ –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É?",
    work_finished_blocked: "–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
    assistant_lost_connecting_new: "–°–≤—è–∑—å —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–æ—Ç–µ—Ä—è–Ω–∞, –ø–æ–¥–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...",
    accept_request_confirm: "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å.",
    assistant_joined_chat: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
    request_already_in_progress: "‚ùå –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.",
    another_assistant_accepted: "‚ùå –î—Ä—É–≥–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–∂–µ –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å.",
    exceeded_reject_limit: "üö´ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –æ—Ç–∫–∞–∑–æ–≤ –∏ –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 24 —á–∞—Å–∞.",
    request_subject_from_user: "–¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    request_subject_prefix: "–¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞: %subject%",
    rejected_request_reassigned: "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å. –ù–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.",
    rejected_request_no_assistants: "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.",
    rejected_request_error: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.",
    session_time_remaining: "--------------------------------\n–î–æ –∫–æ–Ω—Ü–∞ —Å–µ–∞–Ω—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å %minutes% –º–∏–Ω—É—Ç",

    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π –∫–ª—é—á:
    assistant_declined_extension: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."
  }
};



const detectUserLanguage = (ctx: Context) => {
  const userLang = ctx.from?.language_code;
  return userLang === 'ru' ? 'ru' : 'en';
};


async function getAssistantPenaltyPoints(assistantId: bigint) {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);

  const actions = await prisma.requestAction.findMany({
    where: {
      assistantId: assistantId,
      createdAt: {
        gte: yesterday,
      },
    },
  });

  let penaltyPoints = 0;
  for (const action of actions) {
    if (action.action === 'REJECTED') {
      penaltyPoints += 1;
    } else if (action.action === 'IGNORED') {
      penaltyPoints += 3;
    }
  }

  return penaltyPoints;
}


async function findNewAssistant(requestId: bigint, ignoredAssistants: bigint[]) {

  const availableAssistants = await prisma.assistant.findMany({
    where: {
      isWorking: true,
      telegramId: {
        notIn: ignoredAssistants,
      },
    },
  });


  const assistantsWithPenalty = await Promise.all(
    availableAssistants.map(async (assistant) => {
      const penaltyPoints = await getAssistantPenaltyPoints(assistant.telegramId);
      return { ...assistant, penaltyPoints };
    })
  );


  assistantsWithPenalty.sort((a, b) => {
    if (a.penaltyPoints === b.penaltyPoints) {

      return (b.lastActiveAt?.getTime() || 0) - (a.lastActiveAt?.getTime() || 0);
    }
    return a.penaltyPoints - b.penaltyPoints;
  });


  const selectedAssistant = assistantsWithPenalty[0];


  if (!selectedAssistant) {
    await prisma.assistantRequest.update({
      where: { id: requestId },
      data: { ignoredAssistants: [] },
    });
    return findNewAssistant(requestId, []);
  }

  return selectedAssistant;
}


async function checkAssistantBlockStatus(ctx: Context) {
  if (!ctx.from?.id) {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.");
    return;
  }

  const telegramId = BigInt(ctx.from.id);
  console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${telegramId.toString()}`);

  const assistant = await prisma.assistant.findUnique({
    where: { telegramId },
    select: { isBlocked: true, unblockDate: true },
  });

  if (!assistant) {
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${telegramId.toString()} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.`);
    return false;
  }

  console.log(
    `–î–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: isBlocked=${assistant.isBlocked}, unblockDate=${assistant.unblockDate}`
  );

  const lang = detectUserLanguage(ctx);

  if (assistant.isBlocked) {
    // –ï—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if (assistant.unblockDate) {
      // –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const currentTime = new Date();
      console.log(`–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime.toISOString()}`);
      console.log(`–î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${assistant.unblockDate.toISOString()}`);

      const remainingTime = Math.ceil(
        (assistant.unblockDate.getTime() - currentTime.getTime()) / (1000 * 60 * 60)
      );

      console.log(`–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${remainingTime}—á`);



      if (remainingTime > 0) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId.toString()} –µ—â—ë –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: ${remainingTime}—á`);
        await ctx.reply(getTranslation(lang, 'blocked_until').replace('{{time}}', String(remainingTime)));

        return true;
      } else {
        console.log(
          `–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId.toString()} –∏—Å—Ç–µ–∫–ª–æ. –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.`
        );

        await prisma.assistant.update({
          where: { telegramId },
          data: { isBlocked: false, unblockDate: null },
        });

        console.log(
          `–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId.toString()} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`
        );

        await ctx.reply(getTranslation(lang, 'block_time_expired'));
      }
    } else {
      // –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ (unblockDate = null)
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId.toString()} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–µ–∑ —Å—Ä–æ–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.`);
      await ctx.reply(getTranslation(lang, 'blocked_permanently'));
      return true;
    }
  } else {
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId.toString()} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
  }

  return false;
}

bot.use(async (ctx, next) => {
  console.log("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–ª–æ—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
  const isBlocked = await checkAssistantBlockStatus(ctx);

  if (isBlocked) {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.");
    return;
  }

  console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.");
  await next();
});

bot.command('start', async (ctx) => {
  const lang = detectUserLanguage(ctx);
  const args = ctx.match?.split(' ') ?? [];

  if (args.length > 0 && args[0].startsWith('invite_')) {
    const inviteToken = args[0].replace('invite_', '');

    try {
      const invitation = await prisma.invitation.findUnique({ where: { token: inviteToken } });

      if (!invitation || invitation.used) {
        await ctx.reply(getTranslation(lang, 'start_invalid_link'));
        return;
      }

      if (ctx.from?.id) {
        const telegramId = BigInt(ctx.from.id);
        const username = ctx.from.username || null;

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const userProfilePhotos = await ctx.api.getUserProfilePhotos(ctx.from.id);

        let avatarFileId: string | null = null;

        if (userProfilePhotos.total_count > 0) {
          // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é "–≥—Ä—É–ø–ø—É" —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
          const photos = userProfilePhotos.photos[0];
          // –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞)
          const largestPhoto = photos[photos.length - 1];

          // –ü–æ–ª—É—á–∞–µ–º file_path —á–µ—Ä–µ–∑ ctx.api.getFile(...)
          const fileObj = await ctx.api.getFile(largestPhoto.file_id);

          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
          // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ process.env.TELEGRAM_SUPPORT_BOT_TOKEN 
          // –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–±–æ—Ç–∞
          const fullAvatarUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_SUPPORT_BOT_TOKEN}/${fileObj.file_path}`;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–Ω–æ URL –≤ avatarFileId (–∏–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–æ–ª–µ –≤ avatarUrl)
          avatarFileId = fullAvatarUrl;

        } else {
          console.log('–£ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.');
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π orderNumber –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const lastAssistant = await prisma.assistant.findFirst({
          orderBy: { orderNumber: 'desc' },
          select: { orderNumber: true },
        });

        const nextOrderNumber = lastAssistant?.orderNumber
          ? lastAssistant.orderNumber + 1
          : 1;

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await prisma.assistant.create({
          data: {
            telegramId,
            username,
            role: invitation.role,
            orderNumber: nextOrderNumber,
            avatarFileId, // <-- —Ç—É—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL
          },
        });

        // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
        await prisma.invitation.update({
          where: { id: invitation.id },
          data: { used: true },
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        await ctx.reply(getTranslation(lang, 'assistant_congrats'));

        // –û–±–Ω–æ–≤–ª—è–µ–º lastActiveAt
        await prisma.assistant.update({
          where: { telegramId },
          data: { lastActiveAt: new Date() },
        });

      } else {
        await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      }
    } catch (error) {
      console.error('Error assigning assistant role:', error);
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
    }

  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç invite-—Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(getTranslation(lang, 'start_message'));
  }
});




bot.command('requests', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  try {
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId },
    });

    if (!assistant) {
      await ctx.reply(getTranslation(lang, 'no_assistant_found'));
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–µ—Å–µ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const activeConversations = await prisma.conversation.findMany({
      where: {
        assistantId: telegramId,
        status: 'IN_PROGRESS',
      },
      include: {
        assistantRequest: true,
      },
    });

    if (activeConversations.length === 0) {
      await ctx.reply(getTranslation(lang, 'no_active_requests'));
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
    const inlineKeyboard = activeConversations.map((conversation) => {
      const subject = conversation.assistantRequest.subject || getTranslation(lang, 'no_message');
      const timeRemaining = calculateTimeRemaining(conversation.createdAt);
      const text = getTranslation(lang, 'request_with_time')
        .replace('%id%', conversation.assistantRequest.id.toString())
        .replace('%subject%', subject)
        .replace('%time%', timeRemaining);

      return [
        {
          text,
          callback_data: `activate_${conversation.id}`,
        },
      ];
    });

    await ctx.reply(getTranslation(lang, 'active_requests_list'), {
      reply_markup: { inline_keyboard: inlineKeyboard },
    });
  } catch (error) {
    console.error('Error fetching requests:', error);
    await ctx.reply(getTranslation(lang, 'server_error'));
  }
});


function calculateTimeRemaining(createdAt: Date): string {
  const maxDuration = 60 * 60 * 1000; // 60 –º–∏–Ω—É—Ç
  const timePassed = Date.now() - createdAt.getTime();
  const timeLeft = maxDuration - timePassed;

  if (timeLeft <= 0) {
    return '–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ';
  }

  const minutes = Math.floor(timeLeft / (60 * 1000));
  const seconds = Math.floor((timeLeft % (60 * 1000)) / 1000);

  return `${minutes}–º ${seconds}—Å`;
}

async function reassignRequest(requestId: bigint, blockedAssistantId: bigint, ctx: Context) {
  try {
    const assistantRequest = await prisma.assistantRequest.findUnique({
      where: { id: requestId },
      include: { conversation: true },
    });

    const ignoredAssistants = assistantRequest?.ignoredAssistants || [];
    if (!ignoredAssistants.includes(blockedAssistantId)) {
      ignoredAssistants.push(blockedAssistantId);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ ABORTED, —Ç–∞–∫ –∫–∞–∫ —Å–≤—è–∑—å –ø–æ—Ç–µ—Ä—è–Ω–∞
    if (assistantRequest?.conversation) {
      await prisma.conversation.update({
        where: { id: assistantRequest.conversation.id },
        data: { status: 'ABORTED' },
      });
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await prisma.assistantRequest.update({
      where: { id: requestId },
      data: {
        status: 'PENDING',
        isActive: true,
        assistantId: null,
        ignoredAssistants,
      },
    });

    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const newAssistant = await findNewAssistant(requestId, ignoredAssistants);

    // –ü–æ–ª—É—á–∞–µ–º userId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userId = assistantRequest?.conversation?.userId;

    if (!userId) {
      console.error('User ID not found in the conversation. Cannot send a message to user.');
      return;
    }

    if (newAssistant) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
      await prisma.assistantRequest.update({
        where: { id: requestId },
        data: {
          assistantId: newAssistant.telegramId,
        },
      });

      const lang = detectUserLanguage(ctx);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –º–µ–¥–∏–∞ –Ω–æ–≤–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (assistantRequest?.subject) {
        const caption = '–¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
        if (assistantRequest.subject.startsWith('http')) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞
          await sendTelegramMediaToAssistant(
            newAssistant.telegramId.toString(),
            assistantRequest.subject,
            caption
          );
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫
          const messageText = getTranslation(lang, 'request_subject').replace('%subject%', assistantRequest.subject || '');

          await sendTelegramMessageWithButtons(
            newAssistant.telegramId.toString(),
            messageText,
            []
          );
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (accept/reject)
      const messageText = assistantRequest?.message || getTranslation(lang, 'new_user_message');

      await sendTelegramMessageWithButtons(
        newAssistant.telegramId.toString(),
        messageText,
        [
          { text: getTranslation(lang, 'accept'), callback_data: `accept_${requestId}` },
          { text: getTranslation(lang, 'reject'), callback_data: `reject_${requestId}` },
        ]
      );


    } else {
      const lang = detectUserLanguage(ctx);
      // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
      await userBot.api.sendMessage(
        Number(userId),
        getTranslation(lang, 'no_more_assistants')
      );
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
    // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
    const assistantRequest = await prisma.assistantRequest.findUnique({
      where: { id: requestId },
      include: { conversation: true },
    });
    const userId = assistantRequest?.conversation?.userId;
    if (userId) {
      const lang = detectUserLanguage(ctx);
      await userBot.api.sendMessage(
        Number(userId),
        getTranslation(lang, 'reassign_request_error')
      );
    }
  }
}

async function handleAcceptConversation(
  conversationId: bigint,
  assistantTelegramId: bigint,
  ctx: Context
) {
  try {
    const lang = detectUserLanguage(ctx);

    // –ò—â–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, –≤–∫–ª—é—á–∞—è —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
    let conversation = await prisma.conversation.findUnique({
      where: { id: conversationId },
      include: { assistantRequest: true }, // —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å request
    });

    if (!conversation) {
      await ctx.reply(getTranslation(lang, 'request_not_found_or_not_assigned'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ ¬´–ø—Ä–∏–Ω—è—Ç—å¬ª.
    // –ï—Å–ª–∏ conversation.status —É–∂–µ 'IN_PROGRESS', –∑–Ω–∞—á–∏—Ç –¥–∏–∞–ª–æ–≥ —É–∂–µ –≤–µ–¥—ë—Ç—Å—è
    if (conversation.status === 'IN_PROGRESS') {
      await ctx.reply(getTranslation(lang, 'request_already_in_progress'));
      return;
    }

    // "–†–µ–∞–Ω–∏–º–∏—Ä—É–µ–º" —Ä–∞–∑–≥–æ–≤–æ—Ä. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π createdAt, —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    conversation = await prisma.conversation.update({
      where: { id: conversation.id },
      data: {
        status: 'IN_PROGRESS',
        assistantId: assistantTelegramId,
        createdAt: new Date(),   // –û–±–Ω—É–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
        updatedAt: new Date(),   // —Ö–æ—Ç—è —Å @updatedAt —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      },
      include: {
        assistantRequest: true,
      },
    });

    // –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É (AssistantRequest), –µ—Å–ª–∏ –µ—Å—Ç—å
    if (conversation.assistantRequest) {
      await prisma.assistantRequest.update({
        where: { id: conversation.assistantRequest.id },
        data: {
          status: 'IN_PROGRESS',
          isActive: true,
        },
      });
    }

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π –∏–º –∑–∞–Ω–∏–º–∞–ª—Å—è)
    await prisma.assistant.updateMany({
      where: { activeConversationId: conversation.id },
      data: { activeConversationId: null },
    });

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
    await prisma.assistant.update({
      where: { telegramId: assistantTelegramId },
      data: { activeConversationId: conversation.id },
    });

    // –°–æ–æ–±—â–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –æ–± —É—Å–ø–µ—Ö–µ
    await ctx.reply(getTranslation(lang, 'accept_request_confirm'));

    // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (conversation.userId) {
      await sendTelegramMessageToUser(
        conversation.userId.toString(),
        getTranslation(lang, 'assistant_joined_chat')
      );
    }

  } catch (error) {
    const lang = detectUserLanguage(ctx);
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:', error);
    await ctx.reply(getTranslation(lang, 'another_assistant_accepted'));
  }
}



async function handleRejectConversation(
  conversationId: bigint,
  assistantTelegramId: bigint,
  ctx: Context
) {
  try {
    const lang = detectUserLanguage(ctx);

    // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const conversation = await prisma.conversation.findUnique({
      where: { id: conversationId },
    });

    if (!conversation) {
      // –†–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
      await ctx.reply(getTranslation(lang, 'request_not_found_or_not_assigned'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    // –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –µ–≥–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
    if (conversation.assistantId !== assistantTelegramId) {
      // –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
      await ctx.reply(getTranslation(lang, 'another_assistant_accepted'));
      return;
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —Å—Ç–∞—Ç—É—Å ABORTED (–∏–ª–∏ –ª—é–±–æ–π, –Ω—É–∂–Ω—ã–π –≤–∞–º)
    await prisma.conversation.update({
      where: { id: conversationId },
      data: {
        status: 'ABORTED',
      },
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º `activeConversationId` —É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä
    await prisma.assistant.updateMany({
      where: {
        telegramId: assistantTelegramId,
        activeConversationId: conversationId,
      },
      data: { activeConversationId: null },
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, —á—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    await ctx.reply(getTranslation(lang, 'reject_request'));

    // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è
    if (conversation.userId) {
      await sendTelegramMessageToUser(
        conversation.userId.toString(),
        getTranslation(lang, 'assistant_declined_extension')
        // –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:', error);
    const lang = detectUserLanguage(ctx);
    // –û–±–æ–±—â—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    await ctx.reply(getTranslation(lang, 'server_error'));
  }
}


bot.command('offline', async (ctx) => {
  try {
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(detectUserLanguage(ctx), 'end_dialog_error'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    const lang = detectUserLanguage(ctx);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    const activeConversation = await prisma.conversation.findFirst({
      where: {
        assistantId: telegramId,
        status: 'IN_PROGRESS',
      },
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏ –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è isWorking
    if (activeConversation) {
      const keyboard = new InlineKeyboard()
        .text(getTranslation(lang, 'end_work_confirm'), 'end_work_confirm') // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–ª—é—á –¥–ª—è "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"
        .row()
        .text(getTranslation(lang, 'end_work_cancel'), 'end_work_cancel'); // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á –¥–ª—è "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ"

      await ctx.reply(
        getTranslation(lang, 'active_dialogs_blocking_warning'),
        { reply_markup: keyboard }
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: telegramId },
    });

    if (!assistant) {
      console.error(`Assistant not found with telegramId: ${telegramId}`);
      await ctx.reply(getTranslation(lang, 'no_assistant_found'));
      return;
    }

    if (!assistant.isWorking) {
      await ctx.reply(getTranslation(lang, 'no_working_status'));
      return;
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    const activeSession = await prisma.assistantSession.findFirst({
      where: {
        assistantId: telegramId,
        endedAt: null,
      },
      orderBy: {
        startedAt: 'desc',
      },
    });

    if (activeSession) {
      await prisma.assistantSession.update({
        where: { id: activeSession.id },
        data: { endedAt: new Date() },
      });
    } else {
      console.warn(`No active session found for assistant ${telegramId}`);
    }


    await prisma.assistant.update({
      where: { telegramId: telegramId },
      data: { isWorking: false },
    });

    await ctx.reply(getTranslation(lang, 'end_work'));
  } catch (error) {
    console.error('Error ending work:', error);
    await ctx.reply(getTranslation(detectUserLanguage(ctx), 'end_dialog_error'));
  }
});

bot.callbackQuery('end_work_confirm', async (ctx) => {
  try {
    const telegramId = BigInt(ctx.from.id);
    const lang = detectUserLanguage(ctx);

    // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: telegramId },
    });

    if (!assistant) {
      console.error(`Assistant not found with telegramId: ${telegramId}`);
      await ctx.answerCallbackQuery();
      await ctx.reply(getTranslation(lang, 'no_assistant_found'));
      return;
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    const activeSession = await prisma.assistantSession.findFirst({
      where: {
        assistantId: telegramId,
        endedAt: null,
      },
      orderBy: {
        startedAt: 'desc',
      },
    });

    if (activeSession) {
      await prisma.assistantSession.update({
        where: { id: activeSession.id },
        data: { endedAt: new Date() },
      });
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ COMPLETED)
    await prisma.conversation.updateMany({
      where: {
        assistantId: telegramId,
        status: 'IN_PROGRESS',
      },
      data: {
        status: 'COMPLETED',
      },
    });

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await prisma.assistant.update({
      where: { telegramId: telegramId },
      data: {
        isWorking: false,
        isBlocked: true,
        unblockDate: null
      },
    });

    await ctx.answerCallbackQuery();
    await ctx.editMessageText(getTranslation(lang, 'work_finished_blocked'));

    // –ù–∞–π–¥—ë–º –ª—é–±–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Å–µ–π—á–∞—Å —Ä–∞–∑–≥–æ–≤–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å requestId
    const completedConversation = await prisma.conversation.findFirst({
      where: {
        assistantId: telegramId,
        status: 'COMPLETED',
      },
      orderBy: { updatedAt: 'desc' }
    });

    if (completedConversation) {
      const userId = completedConversation.userId;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ userBot
      await userBot.api.sendMessage(
        Number(userId),
        getTranslation(lang, 'assistant_lost_connecting_new')
      );
      // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥—Ä—É–≥–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
      await reassignRequest(completedConversation.requestId, telegramId, ctx);
    }

  } catch (error) {
    console.error('Error confirming end work:', error);
    await ctx.answerCallbackQuery();
    await ctx.reply(getTranslation(detectUserLanguage(ctx), 'end_dialog_error'));
  }
});

bot.callbackQuery('end_work_cancel', async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    // –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await ctx.deleteMessage();
  } catch (error) {
    console.error('Error canceling end work:', error);
  }
});

bot.command('online', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  try {
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    const assistant = await prisma.assistant.findUnique({ where: { telegramId } });
    if (!assistant) {
      await ctx.reply(getTranslation(lang, 'no_assistant_found'));
      return;
    }

    if (assistant.isWorking) {
      await ctx.reply(getTranslation(lang, 'already_working'));
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ + —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
    await prisma.assistant.update({
      where: { telegramId },
      data: {
        isWorking: true,
        language: lang,       // <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      },
    });

    // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await prisma.assistantSession.create({
      data: {
        assistantId: telegramId,
      },
    });

    const pendingRequest = await prisma.assistantRequest.findFirst({
      where: {
        status: 'PENDING',
      },
    });

    if (pendingRequest) {
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç—É—Å IN_PROGRESS –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const updatedRequest = await prisma.assistantRequest.update({
        where: { id: pendingRequest.id },
        data: {
          assistantId: telegramId,
          status: 'IN_PROGRESS',
        },
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ–º—ã
      const messageText = updatedRequest?.subject
        ? updatedRequest.subject.startsWith('http')
          ? `${getTranslation(lang, 'assistantRequestMessage')}`
          : `${getTranslation(lang, 'assistantRequestMessage')}\n\n${getTranslation(lang, 'topic')}: ${updatedRequest.subject}`
        : `${getTranslation(lang, 'assistantRequestMessage')}\n\n${getTranslation(lang, 'topic')}: ${getTranslation(lang, 'no_subject')}`;

      if (updatedRequest?.subject?.startsWith('http')) {
        // –ï—Å–ª–∏ subject ‚Äî —Å—Å—ã–ª–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É)
        await sendTelegramMediaToAssistant(
          telegramId.toString(),
          updatedRequest.subject,
          ''
        );

        // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await sendTelegramMessageWithButtons(
          telegramId.toString(),
          getTranslation(lang, 'assistantRequestMessage'),
          [
            { text: getTranslation(lang, 'accept'), callback_data: `accept_${updatedRequest.id.toString()}` },
            { text: getTranslation(lang, 'reject'), callback_data: `reject_${updatedRequest.id.toString()}` },
          ]
        );
      } else {
        // –ï—Å–ª–∏ subject –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        await sendTelegramMessageWithButtons(
          telegramId.toString(),
          messageText,
          [
            { text: getTranslation(lang, 'accept'), callback_data: `accept_${updatedRequest.id.toString()}` },
            { text: getTranslation(lang, 'reject'), callback_data: `reject_${updatedRequest.id.toString()}` },
          ]
        );
      }
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç PENDING-–∑–∞–ø—Ä–æ—Å–æ–≤
    await ctx.reply(getTranslation(lang, 'work_started'));
  } catch (error) {
    console.error('Error in /online command:', error);
    await ctx.reply(getTranslation(detectUserLanguage(ctx), 'server_error'));
  }
});


bot.command('coins', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  try {
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);

    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: telegramId },
    });

    if (assistant) {
      const coinsMessage = `${getTranslation(lang, 'my_coins')}: ${assistant.coins}`;

      await ctx.reply(coinsMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: getTranslation(lang, 'request_withdrawal'), callback_data: 'request_withdrawal' }],
          ],
        },
      });
    } else {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
    }
  } catch (error) {
    console.error('Error in /my_coins command:', error);
    await ctx.reply(getTranslation(lang, 'server_error'));
  }
});

bot.command('my_activity', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  try {
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);

    const stats = await getAssistantActivity(telegramId);

    const activityMessage = `
üìä ${getTranslation(lang, 'my_activity')}:
- ${getTranslation(lang, 'total_conversations')}: ${stats.totalConversations}
- ${getTranslation(lang, 'conversations_last_24_hours')}: ${stats.conversationsLast24Hours}
- ${getTranslation(lang, 'ignored_requests')}: ${stats.ignoredRequests}
- ${getTranslation(lang, 'rejected_requests')}: ${stats.rejectedRequests}
- ${getTranslation(lang, 'complaints_last_24_hours')}: ${stats.complaintsLast24Hours}
`;

    await ctx.reply(activityMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: getTranslation(lang, 'view_limits'), callback_data: 'view_limits' }],
        ],
      },
    });

  } catch (error) {
    console.error('Error in /my_activity command:', error);
    await ctx.reply(getTranslation(lang, 'server_error'));
  }
});



bot.on('callback_query:data', async (ctx) => {
  const data = ctx.callbackQuery?.data;
  const lang = detectUserLanguage(ctx);

  if (!ctx.from?.id) {
    await ctx.reply(getTranslation(lang, 'end_dialog_error'));
    return;
  }

  const telegramId = BigInt(ctx.from.id);

  if (data?.startsWith('activate_')) {
    // Handle activation of a conversation
    const conversationId = BigInt(data.split('_')[1]);
    const assistantId = telegramId;

    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: assistantId },
    });

    if (!assistant) {
      await ctx.answerCallbackQuery({ text: getTranslation(lang, 'no_assistant_found'), show_alert: true });
      return;
    }

    const conversation = await prisma.conversation.findUnique({
      where: { id: conversationId },
      include: { assistantRequest: true, user: true },
    });

    if (!conversation || conversation.assistantId !== assistantId) {
      await ctx.answerCallbackQuery({
        text: getTranslation(lang, 'request_not_found_or_not_assigned'),
        show_alert: true,
      });
      return;
    }

    // Activate the selected conversation for the assistant
    await prisma.assistant.update({
      where: { telegramId: assistantId },
      data: { activeConversationId: conversationId },
    });

    await ctx.answerCallbackQuery({
      text: `${getTranslation(lang, 'activated_request_with_subject')}: ${conversation.assistantRequest.subject}`,
    });
    await ctx.reply(
      `${getTranslation(lang, 'now_chatting_with_user')}: ${conversation.user.username || conversation.userId}`
    );
  } else if (data.startsWith('accept_') || data.startsWith('reject_')) {
    // Handle accept or reject actions
    const [action, requestIdString] = data.split('_');
    const requestId = BigInt(requestIdString);

    if (action === 'accept') {
      await handleAcceptRequest(requestId.toString(), telegramId, ctx);
    } else if (action === 'reject') {
      await handleRejectRequest(requestId.toString(), telegramId, ctx);
    }
  } else if (data.startsWith('acceptConv_') || data.startsWith('rejectConv_')) {
    // "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏–ª–∏ "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å" —Ä–∞–∑–≥–æ–≤–æ—Ä
    const [action, convIdString] = data.split('_');
    const conversationId = BigInt(convIdString);

    if (action === 'acceptConv') {
      await handleAcceptConversation(conversationId, telegramId, ctx);
    } else if (action === 'rejectConv') {
      await handleRejectConversation(conversationId, telegramId, ctx);
    }
  } else if (data === 'my_activity') {
    // Handle displaying activity
    const stats = await getAssistantActivity(telegramId);

    const activityMessage = `
üìä ${getTranslation(lang, 'my_activity')}:
- ${getTranslation(lang, 'total_conversations')}: ${stats.totalConversations}
- ${getTranslation(lang, 'conversations_last_24_hours')}: ${stats.conversationsLast24Hours}
- ${getTranslation(lang, 'ignored_requests')}: ${stats.ignoredRequests}
- ${getTranslation(lang, 'rejected_requests')}: ${stats.rejectedRequests}
- ${getTranslation(lang, 'complaints_last_24_hours')}: ${stats.complaintsLast24Hours}
`;

    await ctx.reply(activityMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: getTranslation(lang, 'view_limits'), callback_data: 'view_limits' }],
        ],
      },
    });
  } else if (data === 'request_withdrawal') {
    // Handle withdrawal request
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: telegramId },
    });

    if (assistant) {
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);

      const pendingComplaints = await prisma.complaint.count({
        where: {
          assistantId: assistant.telegramId,
          status: 'PENDING',
        },
      });

      if (pendingComplaints > 0) {
        await ctx.reply(getTranslation(lang, 'complaint_pending'));
        return;
      }

      const rejectedActions = await prisma.requestAction.count({
        where: {
          assistantId: assistant.telegramId,
          action: 'REJECTED',
          createdAt: {
            gte: yesterday,
          },
        },
      });

      const ignoredActions = await prisma.requestAction.count({
        where: {
          assistantId: assistant.telegramId,
          action: 'IGNORED',
          createdAt: {
            gte: yesterday,
          },
        },
      });

      if (rejectedActions > 10 || ignoredActions > 3) {
        await ctx.reply(getTranslation(lang, 'balance_frozen'));
        return;
      }

      const withdrawalAmount = assistant.coins;

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—ã–≤–æ–¥ –ø—Ä–∏ –Ω—É–ª–µ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É:
      // if (withdrawalAmount <= 0) {
      //   await ctx.reply('–£ –≤–∞—Å 0 –∫–æ–∏–Ω–æ–≤, –≤—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω');
      //   return;
      // }

      // –°—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è
      await ctx.reply(getTranslation(lang, 'withdrawal_request_sent'));

      // 1. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ withdrawalRequest
      await prisma.withdrawalRequest.create({
        data: {
          userId: assistant.telegramId,
          userNickname: ctx.from?.username || null,
          userRole: 'assistant',
          amount: withdrawalAmount,
        },
      });

      // 2. –í—ã—á–∏—Ç–∞–µ–º —ç—Ç–∏ –∫–æ–∏–Ω—ã –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º)
      //    –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω—É–ª—è–µ–º:
      await prisma.assistant.update({
        where: { telegramId: assistant.telegramId },
        data: {
          coins: { decrement: withdrawalAmount },
          // –õ–∏–±–æ coins: 0, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±–µ–∑ decrement. –ù–æ decrement –Ω–∞–¥—ë–∂–Ω–µ–µ,
          // —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å "coins: 0" –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É—Å–ø–µ–ª –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
        },
      });

      await ctx.reply(getTranslation(lang, 'withdrawal_request_created'));
    } else {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
    }
  }
  else if (data === 'view_limits') {
    // Handle viewing limits
    await ctx.reply(getTranslation(lang, 'limits_info'));
  } else {
    // Unknown callback data
    await ctx.answerCallbackQuery({ text: getTranslation(lang, 'unknown_action'), show_alert: true });
  }
});




async function getAssistantActivity(assistantId: bigint) {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);


  const totalConversations = await prisma.conversation.count({
    where: { assistantId: assistantId },
  });


  const conversationsLast24Hours = await prisma.conversation.count({
    where: {
      assistantId: assistantId,
      createdAt: {
        gte: yesterday,
      },
    },
  });


  const ignoredRequests = await prisma.requestAction.count({
    where: {
      assistantId: assistantId,
      action: 'IGNORED',
      createdAt: {
        gte: yesterday,
      },
    },
  });


  const rejectedRequests = await prisma.requestAction.count({
    where: {
      assistantId: assistantId,
      action: 'REJECTED',
      createdAt: {
        gte: yesterday,
      },
    },
  });


  const complaintsLast24Hours = await prisma.complaint.count({
    where: {
      assistantId: assistantId,
      createdAt: {
        gte: yesterday,
      },
    },
  });

  return {
    totalConversations,
    conversationsLast24Hours,
    ignoredRequests,
    rejectedRequests,
    complaintsLast24Hours,
  };
}


async function handleAcceptRequest(
  requestId: string,
  assistantTelegramId: bigint,
  ctx: Context
) {
  try {
    const lang = detectUserLanguage(ctx);

    // 1. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    const assistantRequest = await prisma.assistantRequest.update({
      where: { id: BigInt(requestId) },
      data: { status: 'IN_PROGRESS', isActive: true },
      include: { user: true },
    });

    // 2. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ —ç—Ç–æ–º—É `requestId`
    let conversation = await prisma.conversation.findFirst({
      where: { requestId: assistantRequest.id },
    });

    // –ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω–µ—Ç - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏—Ç—É–∞—Ü–∏—è,
    // –∫–æ–≥–¥–∞ —Å—Ç–∞—Ä—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è; —Ç–æ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º.
    if (!conversation) {
      conversation = await prisma.conversation.create({
        data: {
          userId: assistantRequest.userId,
          assistantId: assistantTelegramId,
          requestId: assistantRequest.id,
          messages: [],         // –ò–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
          status: 'IN_PROGRESS',
          lastMessageFrom: 'USER',
        },
      });

      await ctx.reply(getTranslation(lang, 'accept_request'));
      await sendTelegramMessageToUser(
        assistantRequest.user.telegramId.toString(),
        getTranslation(lang, 'assistant_joined_chat')
      );
    } else {
      // –†–∞–∑–≥–æ–≤–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–º–æ—Ç—Ä–∏–º –Ω–∞ –µ–≥–æ —Å—Ç–∞—Ç—É—Å.
      if (conversation.status === 'IN_PROGRESS') {
        // –ï—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äì –∑–Ω–∞—á–∏—Ç ¬´–∫—Ç–æ-—Ç–æ —É–∂–µ –ø—Ä–∏–Ω—è–ª —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å¬ª
        await ctx.reply(getTranslation(lang, 'request_already_in_progress'));
        return;
      } else if (
        conversation.status === 'ABORTED' ||
        conversation.status === 'COMPLETED'
      ) {
        // ¬´—Ä–µ–∞–Ω–∏–º–∏—Ä—É–µ–º¬ª —Ä–∞–∑–≥–æ–≤–æ—Ä
        conversation = await prisma.conversation.update({
          where: { id: conversation.id },
          data: {
            assistantId: assistantTelegramId,
            // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äì –Ω–µ –∑–∞—Ç–∏—Ä–∞–π—Ç–µ –∏—Ö.
            // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì –º–æ–∂–Ω–æ messages: [],
            status: 'IN_PROGRESS',
            updatedAt: new Date(),
            // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å lastMessageFrom, responseTimes –∏ —Ç. –¥.
            // –î–ª—è –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å.
          },
        });

        await ctx.reply(getTranslation(lang, 'accept_request_confirm'));
        await sendTelegramMessageToUser(
          assistantRequest.user.telegramId.toString(),
          getTranslation(lang, 'assistant_joined_chat')
        );
      } else {
        // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±—É–¥—É—Ç –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã
        await ctx.reply(getTranslation(lang, 'request_already_in_progress'));
        return;
      }
    }

    // 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º `activeConversationId` —É –¥—Ä—É–≥–∏—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ (—á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º).
    await prisma.assistant.updateMany({
      where: { activeConversationId: conversation.id },
      data: { activeConversationId: null },
    });

    // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await prisma.assistant.update({
      where: { telegramId: assistantTelegramId },
      data: { activeConversationId: conversation.id },
    });
  } catch (error) {
    const lang = detectUserLanguage(ctx);
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    // –õ–æ–≤–∏–º –ª—é–±—É—é –æ—à–∏–±–∫—É –∏ —à–ª—ë–º ¬´–¥—Ä—É–≥–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç...¬ª, 
    // –ª—É—á—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å `error.code`, `error.message`, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤ —á—ë–º –¥–µ–ª–æ.
    await ctx.reply(getTranslation(lang, 'another_assistant_accepted'));
  }
}

async function handleRejectRequest(requestId: string, assistantTelegramId: bigint, ctx: Context) {
  try {
    const edges = await prisma.edges.findFirst();
    const maxRejects = edges ? edges.maxRejects : 7;

    const rejectCount = await prisma.requestAction.count({
      where: {
        assistantId: assistantTelegramId,
        action: 'REJECTED',
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000),
        },
      },
    });

    if (rejectCount >= maxRejects) {
      await prisma.assistant.update({
        where: { telegramId: assistantTelegramId },
        data: {
          isBlocked: true,
          unblockDate: new Date(Date.now() + 24 * 60 * 60 * 1000),
        },
      });
      const lang = detectUserLanguage(ctx);
      await ctx.reply(getTranslation(lang, 'exceeded_reject_limit'));
      return;
    }

    const assistantRequest = await prisma.assistantRequest.findUnique({
      where: { id: BigInt(requestId) },
      include: { conversation: true },
    });

    const ignoredAssistants = assistantRequest?.ignoredAssistants || [];
    ignoredAssistants.push(assistantTelegramId);

    if (assistantRequest?.conversation) {
      await prisma.conversation.update({
        where: { id: assistantRequest.conversation.id },
        data: { status: 'ABORTED' },
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    await prisma.requestAction.create({
      data: {
        requestId: BigInt(requestId),
        assistantId: assistantTelegramId,
        action: 'REJECTED',
      },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await prisma.assistantRequest.update({
      where: { id: BigInt(requestId) },
      data: {
        status: 'PENDING',
        isActive: true,
        assistantId: null,
        ignoredAssistants,
      },
    });

    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const lang = detectUserLanguage(ctx);
    const newAssistant = await findNewAssistant(BigInt(requestId), ignoredAssistants);

    if (newAssistant) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
      await prisma.assistantRequest.update({
        where: { id: BigInt(requestId) },
        data: {
          assistantId: newAssistant.telegramId,
        },
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ subject –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (assistantRequest?.subject) {
        const caption = getTranslation(lang, 'request_subject_from_user');
        if (assistantRequest.subject.startsWith('http')) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
          await sendTelegramMediaToAssistant(
            newAssistant.telegramId.toString(),
            assistantRequest.subject,
            caption
          );
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫
          const subjectText = getTranslation(lang, 'request_subject_prefix')
            .replace('%subject%', assistantRequest.subject);
          await sendTelegramMessageWithButtons(
            newAssistant.telegramId.toString(),
            subjectText,
            []
          );
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      const mainMessage = assistantRequest?.message || getTranslation(lang, 'new_user_message');
      await sendTelegramMessageWithButtons(
        newAssistant.telegramId.toString(),
        mainMessage,
        [
          { text: getTranslation(lang, 'accept'), callback_data: `accept_${requestId}` },
          { text: getTranslation(lang, 'reject'), callback_data: `reject_${requestId}` },
        ]
      );

      await ctx.reply(getTranslation(lang, 'rejected_request_reassigned'));
    } else {
      await ctx.reply(getTranslation(lang, 'rejected_request_no_assistants'));
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    const lang = detectUserLanguage(ctx);
    await ctx.reply(getTranslation(lang, 'rejected_request_error'));
  }
} // <-- –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é




// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
async function sendTelegramMediaToAssistant(userId: string, mediaUrl: string, caption: string): Promise<void> {
  try {
    if (mediaUrl.endsWith('.jpg') || mediaUrl.endsWith('.png')) {
      await sendPhoto(userId, mediaUrl, caption);
    } else if (mediaUrl.endsWith('.mp4')) {
      await sendVideo(userId, mediaUrl, caption);
    } else if (mediaUrl.endsWith('.ogg') || mediaUrl.endsWith('.mp3')) {
      await sendVoice(userId, mediaUrl);
    } else {
      console.error('Unsupported media type:', mediaUrl);
    }
  } catch (error) {
    console.error("Error sending media to assistant:", error);
    throw error;
  }
}


async function sendPhoto(userId: string, mediaUrl: string, caption: string): Promise<void> {
  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const response = await axios.get(mediaUrl, { responseType: 'arraybuffer' });
    const buffer = Buffer.from(response.data, 'binary');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await assistantBot.api.sendPhoto(userId, new InputFile(buffer), { caption });
    console.log(`Photo sent to user ${userId}`);
  } catch (error) {
    console.error('Error sending photo:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
async function sendVideo(userId: string, mediaUrl: string, caption: string) {
  try {
    await assistantBot.api.sendVideo(userId, mediaUrl, { caption });
    console.log(`Video sent to user ${userId}`);
  } catch (error) {
    console.error('Error sending video:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendVoice(userId: string, mediaUrl: string) {
  try {
    console.log(`sendVoice: Preparing to send voice message to assistant ${userId}`);
    console.log(`Media URL: ${mediaUrl}`);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const response = await axios.get(mediaUrl, { responseType: 'arraybuffer' });
    const voiceBuffer = Buffer.from(response.data, 'binary');
    const fileName = 'voice.ogg'; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    console.log(`Sending voice message to assistant ${userId}`);
    await sendFileToAssistant(userId, voiceBuffer, fileName);

    console.log(`Voice message successfully sent to assistant ${userId}`);
  } catch (error) {
    console.error(`Error sending voice message to assistant ${userId}:`, error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
async function sendFileToAssistant(assistantChatId: string, fileBuffer: Buffer, fileName: string) {
  const botToken = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
  if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_SUPPORT_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  const assistantBot = new Bot(botToken);

  try {
    await assistantBot.api.sendDocument(assistantChatId, new InputFile(fileBuffer, fileName));
    console.log(`File sent to assistant: ${assistantChatId}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É:', error);
  }
}




const SESSION_DURATION = 60; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

bot.on('message', async (ctx) => {
  const lang = detectUserLanguage(ctx); // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  try {
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    const assistantTelegramId = BigInt(ctx.from.id);

    // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω—É—é –±–µ—Å–µ–¥—É
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: assistantTelegramId },
      include: { activeConversation: true },
    });

    if (!assistant) {
      await ctx.reply(getTranslation(lang, 'no_assistant_found'));
      return;
    }

    if (!assistant.activeConversationId) {
      await ctx.reply(getTranslation(lang, 'no_active_requests'));
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –±–µ—Å–µ–¥—É
    const activeConversation = await prisma.conversation.findUnique({
      where: { id: assistant.activeConversationId },
      include: { user: true },
    });

    if (!activeConversation) {
      await ctx.reply(getTranslation(lang, 'no_active_requests'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ—Å–µ–¥—ã
    if (activeConversation.status !== 'IN_PROGRESS') {
      await ctx.reply(getTranslation(lang, 'no_active_requests'));
      return;
    }

    const assistantMessage = ctx.message?.text;
    if (!assistantMessage) {
      await ctx.reply(getTranslation(lang, 'send_message_error'));
      return;
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    const conversationStartTime = new Date(activeConversation.createdAt);
    const currentTime = new Date();
    const elapsedMinutes = Math.floor((currentTime.getTime() - conversationStartTime.getTime()) / 60000);
    const remainingMinutes = Math.max(SESSION_DURATION - elapsedMinutes, 0);

    const timeMessage = getTranslation(lang, 'session_time_remaining')
      .replace('%minutes%', String(remainingMinutes));

    const responseMessage = `
${assistantMessage}
${timeMessage}
`.trim();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±–µ—Å–µ–¥—ã IN_PROGRESS
    await sendTelegramMessageToUser(
      activeConversation.userId.toString(),
      responseMessage
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', error);
    await ctx.reply(getTranslation(lang, 'error_processing_message'));
  }
});




export const POST = webhookCallback(bot, 'std/http');
