import { Bot, webhookCallback } from 'grammy';
import { Context } from 'grammy';
import OpenAI from 'openai';
import { PrismaClient, AssistantRequest } from '@prisma/client';
import { InputFile } from 'grammy';
import { encode } from 'gpt-3-encoder';
import axios from 'axios';

const prisma = new PrismaClient();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const token = process.env.TELEGRAM_USER_BOT_TOKEN;
if (!token) throw new Error('TELEGRAM_USER_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.');
if (!process.env.OPENAI_API_KEY) throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω.');

const bot = new Bot(token);

const assistantBot = new Bot(process.env.TELEGRAM_SUPPORT_BOT_TOKEN || "");

type ChatMessage = {
  role: 'system' | 'user' | 'assistant';
  content: string;
};


const userConversations = new Map<bigint, ChatMessage[]>();

async function sendFileToAssistant(assistantChatId: string, fileBuffer: Buffer, fileName: string) {
  const botToken = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
  if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_SUPPORT_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  const assistantBot = new Bot(botToken);

  try {

    await assistantBot.api.sendDocument(assistantChatId, new InputFile(fileBuffer, fileName));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É:', error);
  }
}


async function sendMessageToAssistant(
  ctx: Context | null,
  assistantChatId: string,
  message?: string
) {
  const botToken = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
  if (!botToken) {
    console.error('[sendMessageToAssistant] –û—à–∏–±–∫–∞: TELEGRAM_SUPPORT_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  const assistantBot = new Bot(botToken);

  try {
    if (message) {
      console.log(`[sendMessageToAssistant] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É. Chat ID: ${assistantChatId}, Message: ${message}`);
      await assistantBot.api.sendMessage(assistantChatId, message);
    } else if (ctx && ctx.chat && ctx.message) {
      console.log(`[sendMessageToAssistant] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. Chat ID: ${assistantChatId}, Source Chat ID: ${ctx.chat.id}, Message ID: ${ctx.message.message_id}`);
      await assistantBot.api.copyMessage(
        assistantChatId,
        ctx.chat.id,
        ctx.message.message_id
      );
    } else {
      console.error('[sendMessageToAssistant] –û—à–∏–±–∫–∞: –Ω–∏ message, –Ω–∏ ctx –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–ª–∏ ctx.chat/ctx.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      return;
    }

    const assistantTelegramId = BigInt(assistantChatId);
    console.log(`[sendMessageToAssistant] –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${assistantTelegramId}`);

    const activeConversation = await prisma.conversation.findFirst({
      where: {
        assistantId: assistantTelegramId,
        status: 'IN_PROGRESS',
      },
    });

    if (activeConversation) {
      console.log(`[sendMessageToAssistant] –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä. ID: ${activeConversation.id}`);

      const currentTime = new Date();
      console.log(`[sendMessageToAssistant] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime.toISOString()}`);

      const newMessage = {
        sender: 'USER',
        message: message || 'Media message',
        timestamp: currentTime.toISOString(),
      };

      console.log(`[sendMessageToAssistant] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${JSON.stringify(newMessage)}`);

      const updatedMessages = [
        ...(activeConversation.messages as Array<{
          sender: string;
          message: string;
          timestamp: string;
        }>),
        newMessage,
      ];

      console.log(`[sendMessageToAssistant] –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${JSON.stringify(updatedMessages)}`);

      await prisma.conversation.update({
        where: { id: activeConversation.id },
        data: {
          lastMessageFrom: 'USER',
          lastUserMessageAt: currentTime,
          messages: updatedMessages,
        },
      });

      console.log(`[sendMessageToAssistant] –†–∞–∑–≥–æ–≤–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω. ID: ${activeConversation.id}`);
    } else {
      console.error(`[sendMessageToAssistant] –û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å ID: ${assistantTelegramId}`);
    }
  } catch (error) {
    console.error('[sendMessageToAssistant] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É:', error);
  }
}





type TranslationKey =
  | 'start_message'
  | 'webapp_button'
  | 'no_user_id'
  | 'no_text_message'
  | 'error_processing_message'
  | 'dialog_closed'
  | 'error_end_dialog'
  | 'no_active_dialog'
  | 'user_ended_dialog'
  | 'user_ended_dialog_no_reward'
  | 'ai_no_response'
  | 'ai_chat_deactivated'
  | 'ai_chat_not_active'
  | 'coin_awarded'
  | 'no_user_found'
  | 'no_active_dialogs'
  | 'complaint_submitted'
  | 'enterSubject'
  | 'subjectReceived'
  | 'no_active_request'
  | 'server_error'
  | 'assistantRequestMessage'
  | 'noAssistantsAvailable'
  | 'requestSent'
  | 'accept'
  | 'reject'
  | 'unexpected_photo'
  | 'unexpected_voice'
  | 'no_photo_detected'
  | 'no_active_subscription'
  | 'no_permission_to_send_photos'
  | 'no_permission_to_send_voice'
  | 'no_permission_to_send_files'
  | 'no_permission_to_send_videos'
  | 'unexpected_file'
  | 'subjectExpected'; // Added new key


type Language = 'en' | 'ru';

const getTranslation = (languageCode: string | undefined, key: TranslationKey): string => {
  const translations: Record<Language, Record<TranslationKey, string>> = {
    ru: {
      start_message:
        'üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ Telegram Web App.',
      webapp_button: 'üö™ –í–æ–π—Ç–∏ –≤ Web App',
      no_user_id: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
      no_text_message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
      error_processing_message:
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.',
      dialog_closed:
        '–î–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! –ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /problem',
      error_end_dialog: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.',
      no_active_dialog: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.',
      user_ended_dialog: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.',
      user_ended_dialog_no_reward: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞.',
      ai_no_response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.',
      ai_chat_deactivated: '–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!',
      ai_chat_not_active: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò.',
      coin_awarded: '–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –∫–æ–∏–Ω –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.',
      no_user_found: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
      no_active_dialogs: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.',
      complaint_submitted: '–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.',
      enterSubject: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.',
      subjectReceived: '–¢–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∞. –°–æ–µ–¥–∏–Ω—è–µ–º –≤–∞—Å —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.',
      no_active_request: '–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
      server_error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      assistantRequestMessage: '–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä',
      noAssistantsAvailable: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      requestSent: '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.',
      accept: '–ü—Ä–∏–Ω—è—Ç—å',
      reject: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
      unexpected_photo: '–í–∞—à–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      no_photo_detected: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
      unexpected_voice: '–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      unexpected_file: '–í–∞—à —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      no_active_subscription: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.',
      no_permission_to_send_photos: '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º.',
      no_permission_to_send_voice: '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º.',
      no_permission_to_send_files: '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º.',
      no_permission_to_send_videos: '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º.',
      subjectExpected: '–ú—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç –≤–∞—Å —Ç–µ–º—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ—ë.', // New translation
    },
    en: {
      start_message:
      'üëã This is the user bot! To continue, click the button below and log into the Telegram Web App.',
    webapp_button: 'üö™ Log into Web App',
    no_user_id: 'Failed to retrieve your user ID.',
    no_text_message: 'Please send a text message.',
    error_processing_message:
      'An error occurred while processing your message. Please try again later.',
    dialog_closed: 'The dialog with the assistant has ended. Thank you for using our service!',
    error_end_dialog: 'An error occurred while ending the dialog. Please try again later.',
    no_active_dialog: 'You have no active dialog with an assistant.',
    user_ended_dialog: 'The user has ended the dialog.',
    user_ended_dialog_no_reward: 'The user has ended the dialog. No reward was granted.',
    ai_no_response: 'Sorry, could not get a response from the AI.',
    ai_chat_deactivated: 'AI chat mode has been deactivated. Thank you for using our service!',
    ai_chat_not_active: 'You have no active AI dialog.',
    coin_awarded: 'You have been awarded 1 coin for completing the dialog.',
    no_user_found: 'User not found.',
    no_active_dialogs: 'You have no active dialogs.',
    complaint_submitted: 'Your complaint has been submitted.',
    enterSubject: 'Please enter the subject of your request.',
    subjectReceived: 'Subject received. Connecting you to an assistant.',
    no_active_request: 'No active request found.',
    server_error: 'An error occurred. Please try again later.',
    assistantRequestMessage: 'User request for conversation',
    noAssistantsAvailable: 'No assistants available',
    requestSent: 'The request has been sent to the assistant.',
    accept: 'Accept',
    reject: 'Reject',
    unexpected_photo: 'Your photo has been received but was not expected. Please try again.',
    no_photo_detected: 'Please send an image.',
    unexpected_voice: 'Your voice message has been received but was not expected. Please try again.',
    unexpected_file: 'Your file has been received but was not expected. Please try again.',
    no_active_subscription: 'You do not have an active subscription.',
    no_permission_to_send_photos: 'Your subscription does not allow sending photos to assistants.',
    no_permission_to_send_voice: 'Your subscription does not allow sending voice messages to assistants.',
    no_permission_to_send_files: 'Your subscription does not allow sending files to assistants.',
    no_permission_to_send_videos: 'Your subscription does not allow sending video notes to assistants.',
    subjectExpected: 'We are waiting for you to provide the subject of your request. Please specify it.', // New translation
      
    },
  };

  const selectedLanguage: Language = (languageCode as Language) || 'en';
  return translations[selectedLanguage]?.[key] || translations['en'][key];
};

type JsonArray = Array<string | number | boolean | { [key: string]: string | number | boolean | JsonArray | JsonObject }>;

interface JsonObject {
  [key: string]: string | number | boolean | JsonArray | JsonObject;
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserBlockStatus(ctx: Context) {
  if (!ctx.from?.id) return;

  const telegramId = BigInt(ctx.from.id);


  const user = await prisma.user.findUnique({
    where: { telegramId },
    select: { isBlocked: true, unblockDate: true },
  });


  if (user?.isBlocked && user.unblockDate) {
    const currentTime = new Date();
    const remainingTime = Math.ceil((user.unblockDate.getTime() - currentTime.getTime()) / (1000 * 60 * 60));


    if (remainingTime > 0) {
      await ctx.reply(`–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${remainingTime}—á.`);
      return true;
    } else {

      await prisma.user.update({
        where: { telegramId },
        data: { isBlocked: false, unblockDate: null },
      });
      await ctx.reply("–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã—à–ª–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.");
    }
  }
  return false;
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É
bot.use(async (ctx, next) => {
  const isBlocked = await checkUserBlockStatus(ctx);
  if (!isBlocked) {
    await next();
  }
});




bot.command('end_dialog', async (ctx) => {
  try {
    const languageCode = ctx.from?.language_code || 'en';

    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(languageCode, 'no_user_id'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);


    const activeRequest = await prisma.assistantRequest.findFirst({
      where: {
        user: { telegramId: telegramId },
        isActive: true,
      },
      include: { assistant: true },
    });

    if (!activeRequest) {
      await ctx.reply(getTranslation(languageCode, 'no_active_dialog'));
      return;
    }


    const conversation = await prisma.conversation.findUnique({
      where: { requestId: activeRequest.id },
    });

    if (!conversation) {
      console.error('–û—à–∏–±–∫–∞: —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      await ctx.reply(getTranslation(languageCode, 'error_end_dialog'));
      return;
    }


    await prisma.conversation.update({
      where: { id: conversation.id },
      data: { status: 'COMPLETED' },
    });


    await prisma.assistantRequest.update({
      where: { id: activeRequest.id },
      data: { status: 'COMPLETED', isActive: false },
    });




    const messages = conversation.messages as JsonArray | null;
    if (!Array.isArray(messages) || messages.length === 0 || conversation.lastMessageFrom === 'USER') {



      if (activeRequest.assistant) {
        await sendMessageToAssistant(
          ctx,
          activeRequest.assistant.telegramId.toString(),
          `${getTranslation(languageCode, 'user_ended_dialog_no_reward')}`
        );
      } else {
        console.error('–û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
      }
    } else {


      if (activeRequest.assistant) {
        const coinsToAdd = 1;
        const reason = '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞';


        const updatedAssistant = await prisma.assistant.update({
          where: { telegramId: activeRequest.assistant.telegramId },
          data: { coins: { increment: coinsToAdd } },
        });


        await prisma.assistantCoinTransaction.create({
          data: {
            assistantId: activeRequest.assistant.telegramId,
            amount: coinsToAdd,
            reason: reason,
          },
        });


        await sendMessageToAssistant(
          ctx,
          updatedAssistant.telegramId.toString(),
          `${getTranslation(languageCode, 'user_ended_dialog')} ${getTranslation(languageCode, 'coin_awarded')}`
        );
      } else {
        console.error('–û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
      }
    }

    await ctx.reply(getTranslation(languageCode, 'dialog_closed'));

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞:', error);
    const languageCode = ctx.from?.language_code || 'en';
    await ctx.reply(getTranslation(languageCode, 'error_end_dialog'));
  }
});









bot.command('end_ai', async (ctx) => {
  try {
    const languageCode = ctx.from?.language_code || 'en';

    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(languageCode, 'no_user_id'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);

    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      await ctx.reply(getTranslation(languageCode, 'no_user_id'));
      return;
    }

    if (!user.isActiveAIChat) {
      await ctx.reply(getTranslation(languageCode, 'ai_chat_not_active'));
      return;
    }


    await prisma.user.update({
      where: { telegramId },
      data: { isActiveAIChat: false },
    });


    userConversations.delete(telegramId);


    await ctx.reply(getTranslation(languageCode, 'ai_chat_deactivated'));
  } catch (error) {
    console.error('Error ending AI chat:', error);
    const languageCode = ctx.from?.language_code || 'en';
    await ctx.reply(getTranslation(languageCode, 'error_end_dialog'));
  }
});



bot.command('start', async (ctx) => {
  try {
    const languageCode = ctx.from?.language_code || 'en';

    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(languageCode, 'no_user_id'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    const username = ctx.from.username || null;

    const referralCode = ctx.message?.text?.split(' ')[1];
    let referrerId = null;
    let code = '';

    if (referralCode && referralCode.startsWith('ref_')) {
      code = referralCode.replace('ref_', '');

      console.log(`–ü–æ–∏—Å–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${code}`);

      const referral = await prisma.referral.findUnique({
        where: { code },
        select: {
          isUsed: true,
          userId: true,
        },
      });

      if (!referral) {
        await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.');
        return;
      }

      if (referral.isUsed) {
        await ctx.reply('–≠—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.');
        return;
      }

      referrerId = referral.userId;
    }

    const lastUser = await prisma.user.findFirst({
      orderBy: { orderNumber: 'desc' },
      select: { orderNumber: true },
    });
    const nextOrderNumber = lastUser?.orderNumber ? lastUser.orderNumber + 1 : 1;

    console.log(`–°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: ${telegramId}`);

    const newUser = await prisma.user.upsert({
      where: { telegramId },
      update: { username },
      create: {
        telegramId,
        username,
        orderNumber: nextOrderNumber,
      },
    });

    if (referrerId && code) {
      console.log(`–û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${referrerId}`);

      await prisma.user.update({
        where: { telegramId: referrerId },
        data: {
          referralCount: { increment: 1 },
        },
      });

      console.log(`–û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º: ${code}`);

      await prisma.referral.update({
        where: { code },
        data: {
          isUsed: true,
          referredUserId: newUser.telegramId,
        },
      });

      console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

      const referrer = await prisma.user.findUnique({
        where: { telegramId: referrerId },
        select: { username: true },
      });
      const referrerUsername = referrer?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      await ctx.reply(`üéâ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${referrerUsername}.üéâ`);
    }

    await ctx.reply(getTranslation(languageCode, 'start_message'), {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: getTranslation(languageCode, 'webapp_button'),
              web_app: { url: 'https://crm-vpn.vercel.app/user-profile' },
            },
          ],
        ],
      },
    });
  } catch (error: unknown) {
    const err = error as Error;
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', err.message);
    const languageCode = ctx.from?.language_code || 'en';
    await ctx.reply(getTranslation(languageCode, 'error_processing_message'));
  }
});







const TELEGRAM_LOG_USER_ID = 5829159515;


const sendLogToTelegram = async (message: string) => {
  try {
    await bot.api.sendMessage(TELEGRAM_LOG_USER_ID, message);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error);
  }
};




bot.on("pre_checkout_query", async (ctx) => {
  try {

    await ctx.answerPreCheckoutQuery(true);


    await sendLogToTelegram(`Pre-checkout query received for user ${ctx.from?.id}`);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    await sendLogToTelegram(`Error in pre-checkout query: ${errorMessage}`);
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ pre_checkout_query:", errorMessage);
  }
});


bot.on("message:successful_payment", async (ctx) => {
  try {
    const payment = ctx.message?.successful_payment;
    const userId = ctx.from?.id;

    await sendLogToTelegram(`payment: ${JSON.stringify(serializeBigInt(payment))}, type: ${typeof payment}`);
    await sendLogToTelegram(`userId: ${userId}, type: ${typeof userId}`);

    if (payment && userId) {
      const totalStars = payment.total_amount;
      await sendLogToTelegram(`totalStars: ${totalStars}, type: ${typeof totalStars}`);

      const payloadData = JSON.parse(payment.invoice_payload);
      await sendLogToTelegram(`payloadData: ${JSON.stringify(serializeBigInt(payloadData))}, type: ${typeof payloadData}`);

      const { userId: decodedUserId, assistantRequests, aiRequests } = payloadData;
      await sendLogToTelegram(`decodedUserId: ${decodedUserId}, type: ${typeof decodedUserId}`);

      let decodedUserIdBigInt;
      try {
        decodedUserIdBigInt = BigInt(decodedUserId);
        await sendLogToTelegram(`decodedUserIdBigInt: ${decodedUserIdBigInt.toString()}, type: ${typeof decodedUserIdBigInt}`);
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        await sendLogToTelegram(`Failed to convert decodedUserId to BigInt: ${errorMessage}`);
        throw new Error(`Invalid decodedUserId format for BigInt conversion`);
      }

      // Determine if this is a tariff purchase or extra requests purchase
      if (assistantRequests || aiRequests) {
        // Extra requests purchase
        try {
          await prisma.userTariff.create({
            data: {
              userId: decodedUserIdBigInt,
              totalAssistantRequests: assistantRequests || 0,
              totalAIRequests: aiRequests || 0,
              remainingAssistantRequests: assistantRequests || 0,
              remainingAIRequests: aiRequests || 0,
              expirationDate: new Date("9999-12-31T23:59:59.999Z"), // –ë–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            },
          });

          await sendLogToTelegram(
            `User ${decodedUserIdBigInt.toString()} successfully added extra requests: Assistant = ${assistantRequests}, AI = ${aiRequests}`
          );
        } catch (userTariffError) {
          const errorMessage = userTariffError instanceof Error ? userTariffError.message : String(userTariffError);
          await sendLogToTelegram(`Error creating UserTariff entry for extra requests: ${errorMessage}`);
          throw userTariffError;
        }
      } else {
        // Tariff purchase
        let subscription;
        try {
          await sendLogToTelegram(`Before subscription query: totalStars = ${totalStars}`);
          subscription = await prisma.subscription.findFirst({
            where: {
              price: {
                gte: Number(totalStars) - 0.01,
                lte: Number(totalStars) + 0.01,
              },
            },
          });

          if (!subscription) {
            await sendLogToTelegram(`Subscription not found for price: ${totalStars} stars`);
            throw new Error(`Subscription not found for price: ${totalStars} stars`);
          }

          await sendLogToTelegram(`Subscription found: ${JSON.stringify(serializeBigInt(subscription))}`);
        } catch (subscriptionError) {
          const errorMessage = subscriptionError instanceof Error ? subscriptionError.message : String(subscriptionError);
          await sendLogToTelegram(`Error finding subscription: ${errorMessage}`);
          throw subscriptionError;
        }

        const expirationDate = new Date();
        expirationDate.setMonth(expirationDate.getMonth() + 1); // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: 1 –º–µ—Å—è—Ü

        try {
          await prisma.userTariff.create({
            data: {
              userId: decodedUserIdBigInt,
              tariffId: subscription.id,
              totalAssistantRequests: subscription.assistantRequestCount || 0,
              totalAIRequests: subscription.aiRequestCount || 0,
              remainingAssistantRequests: subscription.assistantRequestCount || 0,
              remainingAIRequests: subscription.aiRequestCount || 0,
              expirationDate, // –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            },
          });

          await sendLogToTelegram(
            `User ${decodedUserIdBigInt.toString()} successfully added a tariff with subscription ID ${subscription.id}.`
          );
        } catch (userTariffError) {
          const errorMessage = userTariffError instanceof Error ? userTariffError.message : String(userTariffError);
          await sendLogToTelegram(`Error creating UserTariff entry: ${errorMessage}`);
          throw userTariffError;
        }
      }

      // –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
      try {
        const referral = await prisma.referral.findFirst({
          where: {
            referredUserId: decodedUserIdBigInt,
            isUsed: true,
          },
          select: {
            userId: true,
          },
        });

        await sendLogToTelegram(`referral: ${JSON.stringify(serializeBigInt(referral))}, type: ${typeof referral}`);

        if (referral) {
          const referringUser = await prisma.user.findUnique({
            where: { telegramId: referral.userId },
            select: { referralPercentage: true },
          });

          if (referringUser) {
            const referralCoins = totalStars * (referringUser.referralPercentage || 0);
            await sendLogToTelegram(
              `Referral found for User ${decodedUserIdBigInt.toString()}. Referring User ${referral.userId.toString()} receives ${referralCoins} coins`
            );

            await prisma.user.update({
              where: { telegramId: referral.userId },
              data: { coins: { increment: referralCoins } },
            });

            await sendLogToTelegram(`User ${referral.userId.toString()} received ${referralCoins} coins as a referral bonus.`);
          } else {
            await sendLogToTelegram(`Referring user not found for User ${decodedUserIdBigInt.toString()}`);
          }
        } else {
          await sendLogToTelegram(`No referral found for User ${decodedUserIdBigInt.toString()}`);
        }
      } catch (referralError) {
        const errorMessage = referralError instanceof Error ? referralError.message : String(referralError);
        await sendLogToTelegram(`Error handling referral bonus: ${errorMessage}`);
        throw referralError;
      }

      await ctx.reply("–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.");
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    await sendLogToTelegram(`Error handling successful payment: ${errorMessage}`);
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:", errorMessage);

    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.");
  }
});




bot.command('problem', async (ctx: Context) => {
  try {
    if (!ctx.from?.id) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
      return;
    }

    const telegramId = BigInt(ctx.from.id);


    const lastRequest = await prisma.assistantRequest.findFirst({
      where: {
        userId: telegramId,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    if (!lastRequest) {
      await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.');
      return;
    }


    const existingComplaint = await prisma.complaint.findUnique({
      where: { id: lastRequest.id },
    });

    if (existingComplaint) {
      await ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∂–∞–ª–æ–±—É –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É.');
      return;
    }

    const assistantId = lastRequest.assistantId ?? BigInt(0);


    await prisma.complaint.create({
      data: {
        id: lastRequest.id,
        userId: telegramId,
        assistantId: assistantId,
        text: '',
        status: 'PENDING',
      },
    });


    await prisma.user.update({
      where: { telegramId },
      data: { isWaitingForComplaint: true },
    });


    await ctx.reply('–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∂–∞–ª–æ–±—É. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.on('callback_query', async (ctx) => {
  try {
    const callbackData = ctx.callbackQuery?.data;

    if (callbackData === 'complain') {
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∂–∞–ª–æ–±—ã
      if (!ctx.from?.id) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
        return;
      }

      const telegramId = BigInt(ctx.from.id);

      const lastRequest = await prisma.assistantRequest.findFirst({
        where: {
          userId: telegramId,
        },
        orderBy: {
          createdAt: 'desc',
        },
      });

      if (!lastRequest) {
        await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.');
        return;
      }

      const existingComplaint = await prisma.complaint.findUnique({
        where: { id: lastRequest.id },
      });

      if (existingComplaint) {
        await ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∂–∞–ª–æ–±—É –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É.');
        return;
      }

      const assistantId = lastRequest.assistantId ?? BigInt(0);

      await prisma.complaint.create({
        data: {
          id: lastRequest.id,
          userId: telegramId,
          assistantId: assistantId,
          text: '',
          status: 'PENDING',
        },
      });

      await prisma.user.update({
        where: { telegramId },
        data: { isWaitingForComplaint: true },
      });

      await ctx.editMessageText('–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∂–∞–ª–æ–±—É. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.');
    } else if (callbackData === 'satisfied') {
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ø –¥–æ–≤–æ–ª–µ–Ω"
      await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞');
      await ctx.answerCallbackQuery(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ callback query
    } else if (callbackData === 'extend_session') {
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞
      if (!ctx.from?.id) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
        return;
      }

      const userId = BigInt(ctx.from.id);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { telegramId: userId },
        include: { conversations: { orderBy: { createdAt: 'desc' }, take: 1 } }, // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ª–æ–≥
      });

      if (!user) {
        await ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–∏–Ω–æ–≤
      if (user.coins < 1) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { telegramId: userId },
        data: { assistantRequests: { decrement: 1 } },
      });

      const lastConversation = user.conversations[0];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ª–æ–≥
      if (!lastConversation || !lastConversation.assistantId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.');
        return;
      }

      const assistantId = lastConversation.assistantId;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
      await sendTelegramMessageWithButtons(
        assistantId.toString(),
        '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞.',
        [
          { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${lastConversation.id}` },
          { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${lastConversation.id}` },
        ]
      );

      await ctx.reply('–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.');
      await ctx.answerCallbackQuery(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ callback query
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});





bot.on('message:text', async (ctx: Context) => {
  let languageCode: Language = 'en'; // Default language

  try {
    // Determine the user's language
    languageCode = (ctx.from?.language_code as Language) || 'en';

    // Ensure the user ID is present
    if (!ctx.from?.id) {
      console.error('No user ID found in the message context.');
      await ctx.reply(getTranslation(languageCode, 'no_user_id'));
      return;
    }

    const telegramId = BigInt(ctx.from.id); // Convert user ID to BigInt
    const userMessage = ctx.message?.text;

    if (!userMessage) {
      console.error(`No text message received from user ID: ${telegramId.toString()}`);
      await ctx.reply(getTranslation(languageCode, 'no_text_message'));
      return;
    }

    console.log(`Received message from user ID: ${telegramId.toString()} - Message: ${userMessage}`);

    // Find the user in the database
    const user = await prisma.user.findUnique({ where: { telegramId } });

    if (!user) {
      console.error(`No user found with telegramId: ${telegramId.toString()}`);
      await ctx.reply(getTranslation(languageCode, 'no_user_found'));
      return;
    }

    console.log(
      `User found: ${JSON.stringify(
        { ...user, telegramId: user.telegramId.toString() },
        serializeBigInt,
        2
      )}`
    );

    // Handle if the user is waiting to file a complaint
    if (user.isWaitingForComplaint) {
      console.log(`User ${telegramId.toString()} is waiting to file a complaint.`);
      await handleUserComplaint(telegramId, userMessage, languageCode, ctx);
      return;
    }

    // Handle if the user is waiting to provide a subject for their request
    if (user.isWaitingForSubject) {
      console.log(`User ${telegramId.toString()} is providing a subject for their request.`);
      const activeRequest = await prisma.assistantRequest.findFirst({
        where: { userId: telegramId, isActive: true, subject: null },
      });

      if (activeRequest) {
        console.log(
          `Active request for subject: ${JSON.stringify(
            { ...activeRequest, userId: activeRequest.userId.toString() },
            serializeBigInt,
            2
          )}`
        );

        // Update the assistant request with the subject
        await prisma.assistantRequest.update({
          where: { id: activeRequest.id },
          data: { subject: userMessage },
        });

        console.log(`Subject updated for request ID: ${activeRequest.id} - Subject: ${userMessage}`);

        // Update the user's state
        await prisma.user.update({
          where: { telegramId },
          data: { isWaitingForSubject: false },
        });

        console.log(`User ${telegramId.toString()} is no longer waiting for a subject.`);

        // Assign an assistant to the updated request
        await assignAssistantToRequest(activeRequest, languageCode);

        await ctx.reply(getTranslation(languageCode, 'subjectReceived'));
      } else {
        console.error(
          `No active request found for user ID: ${telegramId.toString()} while expecting a subject.`
        );
        await ctx.reply(getTranslation(languageCode, 'no_active_request'));
      }
      return;
    }

    // Handle active AI chat
    if (user.isActiveAIChat) {
      console.log(`User ${telegramId.toString()} is in active AI chat.`);
      await handleAIChat(telegramId, userMessage, ctx);
      return;
    }

    // Check for an active conversation
    const activeConversation = await prisma.conversation.findFirst({
      where: {
        userId: telegramId,
        status: 'IN_PROGRESS',
      },
      include: { assistant: true },
    });

    if (activeConversation) {
      console.log(
        `Active conversation found: ${JSON.stringify(
          { ...activeConversation, userId: activeConversation.userId.toString() },
          serializeBigInt,
          2
        )}`
      );

      if (activeConversation.assistant) {
        console.log(`Sending message to assistant ID: ${activeConversation.assistant.telegramId}`);

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å
        const allActiveConversations = await prisma.conversation.findMany({
          where: {
            assistantId: activeConversation.assistant.telegramId,
            status: 'IN_PROGRESS',
          },
          orderBy: {
            createdAt: 'asc', // –¢–∞–∫ –∂–µ, –∫–∞–∫ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞
          },
          include: {
            assistantRequest: true,
          },
        });

        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ
        const currentIndex = allActiveConversations.findIndex(
          (conv) => conv.id === activeConversation.id
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å: –ó–∞–ø—Ä–æ—Å {–Ω–æ–º–µ—Ä}
        const prefix = `–ó–∞–ø—Ä–æ—Å ${currentIndex + 1}: `;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        await sendMessageToAssistant(
          ctx,
          activeConversation.assistant.telegramId.toString(),
          prefix + userMessage
        );
      } else {
        console.error(
          `No assistant assigned to the active conversation with ID: ${activeConversation.id}`
        );
        await ctx.reply(getTranslation(languageCode, 'no_active_dialogs'));
      }
    } else {
      // No active conversation or dialogs
      console.log(`No active conversation found for user ID: ${telegramId.toString()}`);
      if (user.isWaitingForSubject) {
        await ctx.reply(getTranslation(languageCode, 'subjectExpected'));
      } else {
        await ctx.reply(getTranslation(languageCode, 'no_active_dialogs'));
      }
    }
  } catch (error) {
    console.error('Error processing the message:', error);
    await ctx.reply(getTranslation(languageCode, 'server_error'));
  }
});






bot.on('message:photo', async (ctx: Context) => {
  let languageCode: string = 'en'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    languageCode = ctx.from?.language_code || 'en';

    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(languageCode, 'no_user_id'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      await ctx.reply(getTranslation(languageCode, 'no_user_found'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–∞–∑—Ä–µ—à–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    const activeTariffs = await prisma.userTariff.findMany({
      where: {
        userId: telegramId,
        expirationDate: { gte: new Date() }, // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –∏—Å—Ç–µ–∫
      },
      select: {
        tariffId: true,
      },
    });

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º null)
    const validTariffIds = activeTariffs.map((tariff) => tariff.tariffId).filter((id): id is bigint => id !== null);

    if (validTariffIds.length === 0) {
      await ctx.reply(getTranslation(languageCode, 'no_active_subscription'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    const hasPermission = await prisma.subscription.findMany({
      where: {
        id: { in: validTariffIds },
        allowFilesToAssistant: true,
      },
    });

    if (hasPermission.length === 0) {
      await ctx.reply(getTranslation(languageCode, 'no_permission_to_send_photos'));
      return;
    }

    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if (ctx.message?.photo) {
      const largestPhoto = ctx.message.photo[ctx.message.photo.length - 1];

      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
      const file = await ctx.api.getFile(largestPhoto.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_USER_BOT_TOKEN}/${file.file_path}`;

      if (user.isWaitingForSubject) {
        console.log(`User ${telegramId.toString()} is providing a subject as a photo.`);

        const activeRequest = await prisma.assistantRequest.findFirst({
          where: { userId: telegramId, isActive: true, subject: null },
        });

        if (activeRequest) {
          console.log(
            `Active request for subject as photo: ${JSON.stringify(
              { ...activeRequest, userId: activeRequest.userId.toString() },
              null,
              2
            )}`
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –∫–∞–∫ —Ç–µ–º—É
          await prisma.assistantRequest.update({
            where: { id: activeRequest.id },
            data: { subject: fileUrl },
          });

          console.log(`Subject updated for request ID: ${activeRequest.id} - Subject (photo URL): ${fileUrl}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await prisma.user.update({
            where: { telegramId },
            data: { isWaitingForSubject: false },
          });

          console.log(`User ${telegramId.toString()} is no longer waiting for a subject.`);

          // –ù–∞–∑–Ω–∞—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É
          await assignAssistantToRequest(activeRequest, languageCode);

          await ctx.reply(getTranslation(languageCode, 'subjectReceived'));
        } else {
          console.error(
            `No active request found for user ID: ${telegramId.toString()} while expecting a subject.`
          );
          await ctx.reply(getTranslation(languageCode, 'no_active_request'));
        }
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–º—ã
        await ctx.reply(getTranslation(languageCode, 'unexpected_photo'));
      }
    } else {
      await ctx.reply(getTranslation(languageCode, 'no_photo_detected'));
    }
  } catch (error) {
    console.error('Error processing photo:', error);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π languageCode
    await ctx.reply(getTranslation(languageCode, 'server_error'));
  }
});

bot.on('message:voice', async (ctx) => {
  let languageCode: string = 'en'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  try {
    languageCode = ctx.from?.language_code || 'en'; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(languageCode, 'no_user_id'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    const currentTime = new Date();

    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      await ctx.reply(getTranslation(languageCode, 'no_user_found'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–∞–∑—Ä–µ—à–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    const activeTariffs = await prisma.userTariff.findMany({
      where: {
        userId: telegramId,
        expirationDate: { gte: new Date() }, // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –∏—Å—Ç–µ–∫
      },
      select: {
        tariffId: true,
      },
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (–∏—Å–∫–ª—é—á–∞–µ–º null)
    const validTariffIds = activeTariffs.map((tariff) => tariff.tariffId).filter((id): id is bigint => id !== null);

    if (validTariffIds.length === 0) {
      await ctx.reply(getTranslation(languageCode, 'no_active_subscription'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const hasPermission = await prisma.subscription.findMany({
      where: {
        id: { in: validTariffIds },
        allowVoiceToAssistant: true,
      },
    });

    if (hasPermission.length === 0) {
      await ctx.reply(getTranslation(languageCode, 'no_permission_to_send_voice'));
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —Ç–µ–º—ã
    if (user.isWaitingForSubject) {
      console.log(`User ${telegramId.toString()} is providing a subject as a voice message.`);

      const activeRequest = await prisma.assistantRequest.findFirst({
        where: { userId: telegramId, isActive: true, subject: null },
      });

      if (activeRequest) {
        const voice = ctx.message.voice;
        const fileId = voice.file_id;

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        const file = await ctx.api.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_USER_BOT_TOKEN}/${file.file_path}`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–º—É
        await prisma.assistantRequest.update({
          where: { id: activeRequest.id },
          data: { subject: fileUrl },
        });

        console.log(`Subject updated for request ID: ${activeRequest.id} - Subject (voice URL): ${fileUrl}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await prisma.user.update({
          where: { telegramId },
          data: { isWaitingForSubject: false },
        });

        console.log(`User ${telegramId.toString()} is no longer waiting for a subject.`);

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É
        await assignAssistantToRequest(activeRequest, languageCode);

        await ctx.reply(getTranslation(languageCode, 'subjectReceived'));
        return;
      } else {
        console.error(
          `No active request found for user ID: ${telegramId.toString()} while expecting a subject.`
        );
        await ctx.reply(getTranslation(languageCode, 'no_active_request'));
        return;
      }
    }

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    const activeRequest = await prisma.assistantRequest.findFirst({
      where: { userId: telegramId, isActive: true },
      include: { assistant: true },
    });

    if (activeRequest && activeRequest.assistant) {
      const voice = ctx.message.voice;
      const fileId = voice.file_id;
      const fileInfo = await ctx.api.getFile(fileId);
      const fileLink = `https://api.telegram.org/file/bot${process.env.TELEGRAM_USER_BOT_TOKEN}/${fileInfo.file_path}`;

      const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
      const voiceBuffer = Buffer.from(response.data, 'binary');
      const fileName = 'voice.ogg';

      await sendFileToAssistant(activeRequest.assistant.telegramId.toString(), voiceBuffer, fileName);
      await ctx.reply('–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.');

      await prisma.conversation.update({
        where: { id: activeRequest.id },
        data: {
          lastMessageFrom: 'USER',
          lastUserMessageAt: currentTime,
        },
      });
      return;
    }

    // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ—Ç
    await ctx.reply(getTranslation(languageCode, 'unexpected_voice'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await ctx.reply(getTranslation(languageCode, 'server_error'));
  }
});




bot.on('message:document', async (ctx) => {
  let languageCode: string = 'en'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  try {
    languageCode = ctx.from?.language_code || 'en'; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(languageCode, 'no_user_id'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    const currentTime = new Date();

    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      await ctx.reply(getTranslation(languageCode, 'no_user_found'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–∞–∑—Ä–µ—à–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    const activeTariffs = await prisma.userTariff.findMany({
      where: {
        userId: telegramId,
        expirationDate: { gte: new Date() }, // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –∏—Å—Ç–µ–∫
      },
      select: {
        tariffId: true,
      },
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (–∏—Å–∫–ª—é—á–∞–µ–º null)
    const validTariffIds = activeTariffs.map((tariff) => tariff.tariffId).filter((id): id is bigint => id !== null);

    if (validTariffIds.length === 0) {
      await ctx.reply(getTranslation(languageCode, 'no_active_subscription'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤
    const hasPermission = await prisma.subscription.findMany({
      where: {
        id: { in: validTariffIds },
        allowFilesToAssistant: true,
      },
    });

    if (hasPermission.length === 0) {
      await ctx.reply(getTranslation(languageCode, 'no_permission_to_send_files'));
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —Ç–µ–º—ã
    if (user.isWaitingForSubject) {
      console.log(`User ${telegramId.toString()} is providing a subject as a file message.`);

      const activeRequest = await prisma.assistantRequest.findFirst({
        where: { userId: telegramId, isActive: true, subject: null },
      });

      if (activeRequest) {
        const document = ctx.message.document;
        const fileId = document.file_id;

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        const fileInfo = await ctx.api.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_USER_BOT_TOKEN}/${fileInfo.file_path}`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–º—É
        await prisma.assistantRequest.update({
          where: { id: activeRequest.id },
          data: { subject: fileUrl },
        });

        console.log(`Subject updated for request ID: ${activeRequest.id} - Subject (file URL): ${fileUrl}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await prisma.user.update({
          where: { telegramId },
          data: { isWaitingForSubject: false },
        });

        console.log(`User ${telegramId.toString()} is no longer waiting for a subject.`);

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É
        await assignAssistantToRequest(activeRequest, languageCode);

        await ctx.reply(getTranslation(languageCode, 'subjectReceived'));
        return;
      } else {
        console.error(
          `No active request found for user ID: ${telegramId.toString()} while expecting a subject.`
        );
        await ctx.reply(getTranslation(languageCode, 'no_active_request'));
        return;
      }
    }

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    const activeRequest = await prisma.assistantRequest.findFirst({
      where: { userId: telegramId, isActive: true },
      include: { assistant: true },
    });

    if (activeRequest && activeRequest.assistant) {
      const document = ctx.message.document;
      const fileId = document.file_id;
      const fileInfo = await ctx.api.getFile(fileId);
      const fileLink = `https://api.telegram.org/file/bot${process.env.TELEGRAM_USER_BOT_TOKEN}/${fileInfo.file_path}`;

      const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
      const fileBuffer = Buffer.from(response.data, 'binary');
      const fileName = document.file_name || 'document';

      await sendFileToAssistant(activeRequest.assistant.telegramId.toString(), fileBuffer, fileName);
      await ctx.reply('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.');

      await prisma.conversation.update({
        where: { id: activeRequest.id },
        data: {
          lastMessageFrom: 'USER',
          lastUserMessageAt: currentTime,
        },
      });
      return;
    }

    // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ—Ç
    await ctx.reply(getTranslation(languageCode, 'unexpected_file'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    await ctx.reply(getTranslation(languageCode, 'server_error'));
  }
});



bot.on('message:video_note', async (ctx) => {
  let languageCode: string = 'en'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  try {
    languageCode = ctx.from?.language_code || 'en'; // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(languageCode, 'no_user_id'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    const currentTime = new Date();

    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      await ctx.reply(getTranslation(languageCode, 'no_user_found'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–∞–∑—Ä–µ—à–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    const activeTariffs = await prisma.userTariff.findMany({
      where: {
        userId: telegramId,
        expirationDate: { gte: new Date() }, // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –∏—Å—Ç–µ–∫
      },
      select: {
        tariffId: true,
      },
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (–∏—Å–∫–ª—é—á–∞–µ–º null)
    const validTariffIds = activeTariffs.map((tariff) => tariff.tariffId).filter((id): id is bigint => id !== null);

    if (validTariffIds.length === 0) {
      await ctx.reply(getTranslation(languageCode, 'no_active_subscription'));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ
    const hasPermission = await prisma.subscription.findMany({
      where: {
        id: { in: validTariffIds },
        allowVideoToAssistant: true,
      },
    });

    if (hasPermission.length === 0) {
      await ctx.reply(getTranslation(languageCode, 'no_permission_to_send_videos'));
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —Ç–µ–º—ã
    if (user.isWaitingForSubject) {
      console.log(`User ${telegramId.toString()} is providing a subject as a video note.`);

      const activeRequest = await prisma.assistantRequest.findFirst({
        where: { userId: telegramId, isActive: true, subject: null },
      });

      if (activeRequest) {
        const videoNote = ctx.message.video_note;
        const fileId = videoNote.file_id;

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        const fileInfo = await ctx.api.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_USER_BOT_TOKEN}/${fileInfo.file_path}`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –∫–∞–∫ —Ç–µ–º—É
        await prisma.assistantRequest.update({
          where: { id: activeRequest.id },
          data: { subject: fileUrl },
        });

        console.log(`Subject updated for request ID: ${activeRequest.id} - Subject (video note URL): ${fileUrl}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await prisma.user.update({
          where: { telegramId },
          data: { isWaitingForSubject: false },
        });

        console.log(`User ${telegramId.toString()} is no longer waiting for a subject.`);

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É
        await assignAssistantToRequest(activeRequest, languageCode);

        await ctx.reply(getTranslation(languageCode, 'subjectReceived'));
        return;
      } else {
        console.error(
          `No active request found for user ID: ${telegramId.toString()} while expecting a subject.`
        );
        await ctx.reply(getTranslation(languageCode, 'no_active_request'));
        return;
      }
    }

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    const activeRequest = await prisma.assistantRequest.findFirst({
      where: { userId: telegramId, isActive: true },
      include: { assistant: true },
    });

    if (activeRequest && activeRequest.assistant) {
      const videoNote = ctx.message.video_note;
      const fileId = videoNote.file_id;
      const fileInfo = await ctx.api.getFile(fileId);
      const fileLink = `https://api.telegram.org/file/bot${process.env.TELEGRAM_USER_BOT_TOKEN}/${fileInfo.file_path}`;

      const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
      const fileBuffer = Buffer.from(response.data, 'binary');
      const fileName = 'video_note.mp4';

      await sendFileToAssistant(activeRequest.assistant.telegramId.toString(), fileBuffer, fileName);
      await ctx.reply('–í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.');

      await prisma.conversation.update({
        where: { id: activeRequest.id },
        data: {
          lastMessageFrom: 'USER',
          lastUserMessageAt: currentTime,
        },
      });
      return;
    }

    // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ—Ç
    await ctx.reply(getTranslation(languageCode, 'unexpected_file'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞:', error);
    await ctx.reply(getTranslation(languageCode, 'server_error'));
  }
});




async function sendTelegramMediaToAssistant(userId: string, mediaUrl: string, caption: string): Promise<void> {
  try {
    console.log(`sendTelegramMediaToAssistant: Preparing to send media to user ${userId}`);
    console.log(`Media URL: ${mediaUrl}, Caption: ${caption}`);

    if (mediaUrl.endsWith('.jpg') || mediaUrl.endsWith('.png')) {
      console.log('Detected media type: Photo');
      await sendPhoto(userId, mediaUrl, caption);
    } else if (mediaUrl.endsWith('.mp4')) {
      console.log('Detected media type: Video');
      await sendVideo(userId, mediaUrl, caption);
    } else if (mediaUrl.endsWith('.ogg') || mediaUrl.endsWith('.mp3') || mediaUrl.endsWith('.oga')) {
      console.log('Detected media type: Voice');
      await sendVoice(userId, mediaUrl, caption);
    } else {
      console.log('Unsupported media type, treating as a document:', mediaUrl);
      await sendDocument(userId, mediaUrl, caption);
    }
  } catch (error) {
    console.error("Error sending media to assistant:", error);
    throw error;
  }
}

async function handleUserComplaint(telegramId: bigint, userMessage: string, languageCode: string, ctx: Context) {
  try {

    const lastComplaint = await prisma.complaint.findFirst({
      where: {
        userId: telegramId,
        status: 'PENDING',
      },
      orderBy: {
        createdAt: 'desc',
      },
    });


    if (!lastComplaint) {
      await ctx.reply("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }


    await prisma.complaint.update({
      where: { id: lastComplaint.id },
      data: { text: userMessage },
    });


    await prisma.user.update({
      where: { telegramId },
      data: { isWaitingForComplaint: false },
    });

    await ctx.reply(getTranslation(languageCode, 'complaint_submitted'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã:', error);
    await ctx.reply(getTranslation(languageCode, 'error_processing_message'));
  }
}


async function handleAIChat(telegramId: bigint, userMessage: string, ctx: Context) {


  const modelData = await prisma.openAi.findFirst();
  if (!modelData) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  const systemPrompt = modelData.prompt;
  const maxTokensPerRequest = modelData.maxTokensPerRequest;


  const combinedMessage = `${systemPrompt}\n${userMessage}`;


  const messages: ChatMessage[] = userConversations.get(telegramId) || [];


  messages.push({ role: 'user', content: combinedMessage });

  console.log(messages);


  const inputTokens = messages.reduce((total, msg) => total + encode(msg.content).length, 0);
  const maxAllowedTokens = maxTokensPerRequest;
  const responseTokensLimit = 500;

  if (inputTokens + responseTokensLimit > maxAllowedTokens) {
    await ctx.reply('–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –µ–≥–æ.');
    return;
  }

  try {

    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: messages,
      temperature: 0.7,
      max_tokens: responseTokensLimit,
    });

    const firstChoice = response.choices[0];
    if (firstChoice && firstChoice.message && firstChoice.message.content) {
      const aiMessage = firstChoice.message.content.trim();


      messages.push({ role: 'assistant', content: aiMessage });
      userConversations.set(telegramId, messages);


      await ctx.reply(aiMessage);


      await prisma.user.update({
        where: { telegramId },
        data: {
          aiRequests: { increment: 1 },
          totalRequests: { increment: 1 },
        },
      });
    } else {
      await ctx.reply('AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI API:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
  }
}


async function sendTelegramMessageWithButtons(chatId: string, text: string, buttons: TelegramButton[]) {
  const botToken = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_markup: {
        inline_keyboard: buttons.map((button) => [{ text: button.text, callback_data: button.callback_data }]),
      },
    }),
  });
}


type TelegramButton = {
  text: string;
  callback_data: string;
};

function serializeBigInt(obj: unknown): unknown {
  if (typeof obj === 'bigint') {
    return obj.toString(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É
  }
  if (Array.isArray(obj)) {
    return obj.map(serializeBigInt); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã
  }
  if (typeof obj === 'object' && obj !== null) {
    return Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [key, serializeBigInt(value)])
    ); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
  }
  return obj; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã (string, number, boolean –∏ —Ç. –¥.)
}

// Logging function with type safety
function logWithBigInt<T>(obj: T): void {
  console.log(JSON.stringify(obj, serializeBigInt, 2));
}


async function assignAssistantToRequest(assistantRequest: AssistantRequest, languageCode: string) {
  try {
    console.log(`Assigning assistant for request ID: ${assistantRequest.id}`);
    console.log(`Request details: ${JSON.stringify(assistantRequest, serializeBigInt, 2)}`);

    const userIdBigInt = assistantRequest.userId;

    // Fetch only assistants who are working and not blocked
    const availableAssistants = await prisma.assistant.findMany({
      where: {
        isWorking: true,
        isBlocked: false, // Exclude blocked assistants
        telegramId: { notIn: assistantRequest.ignoredAssistants || [] },
      },
    });

    logWithBigInt({ availableAssistants });

    const assistantsWithPenalties = await Promise.all(
      availableAssistants.map(async (assistant) => {
        const penaltyPoints = await getPenaltyPointsForLast24Hours(assistant.telegramId);
        return { ...assistant, penaltyPoints };
      })
    );

    logWithBigInt({ assistantsWithPenalties });

    // Sort assistants based on penalties and activity
    assistantsWithPenalties.sort((a, b) => {
      if (a.penaltyPoints !== b.penaltyPoints) {
        return a.penaltyPoints - b.penaltyPoints;
      }
      return (b.lastActiveAt ? b.lastActiveAt.getTime() : 0) - (a.lastActiveAt ? a.lastActiveAt.getTime() : 0);
    });

    console.log(`Sorted assistants: ${JSON.stringify(assistantsWithPenalties, serializeBigInt, 2)}`);

    if (assistantsWithPenalties.length === 0) {
      console.log('No available assistants after sorting.');
      await sendTelegramMessageToUser(userIdBigInt.toString(), getTranslation(languageCode, 'noAssistantsAvailable'));
      return;
    }

    const selectedAssistant = assistantsWithPenalties[0];

    console.log(`Selected assistant: ${JSON.stringify(selectedAssistant, serializeBigInt, 2)}`);

    // Assign the selected assistant to the request
    await prisma.assistantRequest.update({
      where: { id: assistantRequest.id },
      data: { assistantId: selectedAssistant.telegramId },
    });

    const updatedRequest = await prisma.assistantRequest.findUnique({ where: { id: assistantRequest.id } });

    console.log(`Updated request after assigning assistant: ${JSON.stringify(updatedRequest, serializeBigInt, 2)}`);

    const messageText = updatedRequest?.subject
      ? updatedRequest.subject.startsWith('http')
        ? `${getTranslation(languageCode, 'assistantRequestMessage')}`
        : `${getTranslation(languageCode, 'assistantRequestMessage')}\n\n–¢–µ–º–∞: ${updatedRequest.subject}`
      : `${getTranslation(languageCode, 'assistantRequestMessage')}\n\n–¢–µ–º–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`;

    if (updatedRequest?.subject?.startsWith('http')) {
      // If subject is a media link, send it to the assistant
      await sendTelegramMediaToAssistant(
        selectedAssistant.telegramId.toString(),
        updatedRequest.subject,
        ''
      );

      // Follow up with message containing action buttons
      await sendTelegramMessageWithButtons(
        selectedAssistant.telegramId.toString(),
        getTranslation(languageCode, 'assistantRequestMessage'),
        [
          { text: getTranslation(languageCode, 'accept'), callback_data: `accept_${assistantRequest.id.toString()}` },
          { text: getTranslation(languageCode, 'reject'), callback_data: `reject_${assistantRequest.id.toString()}` },
        ]
      );
    } else {
      // If subject is text, send message with action buttons
      await sendTelegramMessageWithButtons(
        selectedAssistant.telegramId.toString(),
        messageText,
        [
          { text: getTranslation(languageCode, 'accept'), callback_data: `accept_${assistantRequest.id.toString()}` },
          { text: getTranslation(languageCode, 'reject'), callback_data: `reject_${assistantRequest.id.toString()}` },
        ]
      );
    }

    console.log(`Message sent to assistant ID: ${selectedAssistant.telegramId}`);

    await sendTelegramMessageToUser(userIdBigInt.toString(), getTranslation(languageCode, 'requestSent'));
  } catch (error) {
    console.error('Error assigning assistant:', error);
    await sendLogToTelegram(`Error assigning assistant: ${error instanceof Error ? error.message : 'Unknown error'}`);
    await sendTelegramMessageToUser(assistantRequest.userId.toString(), getTranslation(languageCode, 'server_error'));
  }
}




async function sendPhoto(userId: string, mediaUrl: string, caption: string): Promise<void> {
  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const response = await axios.get(mediaUrl, { responseType: 'arraybuffer' });
    const buffer = Buffer.from(response.data, 'binary');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await assistantBot.api.sendPhoto(userId, new InputFile(buffer), { caption });
    console.log(`Photo sent to user ${userId}`);
  } catch (error) {
    console.error('Error sending photo:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
async function sendVideo(userId: string, mediaUrl: string, caption: string) {
  try {
    console.log(`sendVideo: Preparing to send video to user ${userId}`);
    console.log(`Video Media URL: ${mediaUrl}, Caption: ${caption}`);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å mediaUrl
    const response = await axios.get(mediaUrl, { responseType: 'arraybuffer' });
    const videoBuffer = Buffer.from(response.data, 'binary');
    const fileName = 'video.mp4'; // –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∏–¥–µ–æ

    console.log(`Sending video to user ${userId}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –∫–∞–∫ —Ñ–∞–π–ª–∞
    await assistantBot.api.sendVideo(userId, new InputFile(videoBuffer, fileName), {
      caption: caption,
    });

    console.log(`Video successfully sent to user ${userId}`);
  } catch (error) {
    console.error(`Error sending video to user ${userId}:`, error);
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendVoice(userId: string, mediaUrl: string, caption: string) {
  try {
    console.log(`sendVoice: Preparing to send voice message to user ${userId}`);
    console.log(`Voice Media URL: ${mediaUrl}, Caption: ${caption}`);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å mediaUrl
    const response = await axios.get(mediaUrl, { responseType: 'arraybuffer' });
    const voiceBuffer = Buffer.from(response.data, 'binary');
    const fileName = 'voice.ogg'; // –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    console.log(`Sending voice message to user ${userId}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Ñ–∞–π–ª–∞
    await assistantBot.api.sendDocument(userId, new InputFile(voiceBuffer, fileName));

    console.log(`Voice message successfully sent to user ${userId}`);
  } catch (error) {
    console.error(`Error sending voice message to user ${userId}:`, error);
  }
}

async function sendDocument(userId: string, mediaUrl: string, caption: string) {
  try {
    console.log(`sendDocument: Preparing to send document to user ${userId}`);
    console.log(`Document Media URL: ${mediaUrl}, Caption: ${caption}`);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å mediaUrl
    const response = await axios.get(mediaUrl, { responseType: 'arraybuffer' });
    const documentBuffer = Buffer.from(response.data, 'binary');
    const fileName = mediaUrl.split('/').pop() || 'document'; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL

    console.log(`Sending document to user ${userId}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await assistantBot.api.sendDocument(userId, new InputFile(documentBuffer, fileName), {
      caption: caption,
    });

    console.log(`Document successfully sent to user ${userId}`);
  } catch (error) {
    console.error(`Error sending document to user ${userId}:`, error);
  }
}

async function getPenaltyPointsForLast24Hours(
  assistantId: bigint
): Promise<number> {
  const now = new Date();
  const yesterday = new Date(now);
  yesterday.setDate(now.getDate() - 1);

  const assistantIdNumber = Number(assistantId);

  const actions = await prisma.requestAction.findMany({
    where: {
      assistantId: assistantIdNumber,
      createdAt: {
        gte: yesterday,
      },
    },
  });

  let penaltyPoints = 0;
  for (const action of actions) {
    if (action.action === 'REJECTED') {
      penaltyPoints += 1;
    } else if (action.action === 'IGNORED') {
      penaltyPoints += 3;
    }
  }

  return penaltyPoints;
}

async function sendTelegramMessageToUser(chatId: string, text: string) {
  const botToken = process.env.TELEGRAM_USER_BOT_TOKEN;
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
    }),
  });
}





export const POST = webhookCallback(bot, 'std/http');