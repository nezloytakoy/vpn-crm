// remindAndIgnore.ts
import { PrismaClient, Conversation, AssistantRequest } from "@prisma/client";
import { sendTelegramMessageToAssistant, sendTelegramMessageToUser } from "./telegramHelpers";
import { handleIgnoredRequest } from "./helpers";

// –ü–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤—ã—à–µ, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É.

const prisma = new PrismaClient();

export async function sendLogToTelegram(message: string) {
  const TELEGRAM_BOT_TOKEN = '7956735167:AAGzZ_G97SfqE-ulMJZgi1Jt1l8VrR5aC5M'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
  const CHAT_ID = 5829159515;

  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  const body = {
    chat_id: CHAT_ID,
    text: message,
  };

  try {
    await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤ –≤ Telegram:', error);
  }
}


export const translations = {
  ru: {
    no_username_error: "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
    login_password_missing: "–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏.",
    already_moderator: "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
    no_current_arbitrations: "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –∏–ª–∏ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
    moderator_message_prefix: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n\n%message%",
    id_invalid: "ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 9-10 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    message_prompt: "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    message_sent: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
    message_send_error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
    unknown_command: "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.",
    message_user: "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
    message_assistant: "–°–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É",
    menu: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    welcome: "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
    invalid_link: "–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞.",
    moderator_bot: "üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!",
    command_error: "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    user_id_prompt: "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    assistant_id_prompt: "–í–≤–µ–¥–∏—Ç–µ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
    error_processing_message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
    no_user_id: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    no_text_message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",

    // –ù–æ–≤—ã–µ –∫–ª—é—á–∏
    assistant_reminder: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–ø—Ä–æ—Å: %requestId%",
    assistant_reminderNumber: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #%number%: –æ—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–ø—Ä–æ—Å: %requestId%",
    assistant_lost_connection: "–°–≤—è–∑—å —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–æ—Ç–µ—Ä—è–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∞—Å –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...",

    // –ï—â—ë –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
    session_ended: "–í–∞—à —Å–µ–∞–Ω—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–µ–∞–Ω—Å.",
    extend_session_button: "–ü—Ä–æ–¥–ª–∏—Ç—å",
    im_satisfied: "–Ø –¥–æ–≤–æ–ª–µ–Ω",
    complain: "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è - –ú–Ω–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ",
    assistant_bonus_awarded: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å %amount% –∫–æ–∏–Ω–æ–≤ –∑–∞ %periodCount% –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.",
    assistant_bonus_reason: "–ë–æ–Ω—É—Å –∑–∞ %periodCount% –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤",
    mentor_bonus_awarded: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ %amount% –∫–æ–∏–Ω–æ–≤ –∑–∞ %periodCount% –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤–∞—à–µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ.",
    new_request_from_user: "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    accept: "–ü—Ä–∏–Ω—è—Ç—å",
    reject: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
    assistant_blocked_due_to_rejects: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ—Ç–∫–∞–∑–æ–≤.",
    no_assistants_available: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤.",
    topic_of_request: "–¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞: %subject%",
    no_subject: "–£ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Ç —Ç–µ–º—ã.",
    mentor_bonus_reason: "–ë–æ–Ω—É—Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∑–∞ %periodCount% –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"
  },
  en: {
    no_username_error: "You have no username in Telegram. Please set it and try again.",
    login_password_missing: "Login or password is missing in the invitation.",
    already_moderator: "You are already a moderator.",
    no_current_arbitrations: "You have no active arbitrations or current requests.",
    moderator_message_prefix: "Message from moderator:\n\n%message%",
    id_invalid: "The ID must be 9-10 digits. Please try again.",
    message_prompt: "Write your message.",
    message_sent: "Message sent successfully.",
    message_send_error: "Error sending the message.",
    unknown_command: "I don't understand you.",
    message_user: "Message to user",
    message_assistant: "Message to assistant",
    menu: "Main Menu",
    welcome: "üëã Welcome, now you have moderator privileges.",
    invalid_link: "The link is invalid or has already been used.",
    moderator_bot: "üëã This is a bot for moderators!",
    command_error: "Error: Could not process the command. Please try again.",
    user_id_prompt: "Enter the user ID",
    assistant_id_prompt: "Enter the assistant ID",
    error_processing_message: "An error occurred while processing your message. Please try again later.",
    no_user_id: "Failed to retrieve your user ID.",
    no_text_message: "Please send a text message.",

    // –ù–æ–≤—ã–µ –∫–ª—é—á–∏
    assistant_reminder: "Please respond to the user, request: %requestId%",
    assistant_reminderNumber: "Reminder #%number%: Please respond to the user, request: %requestId%",
    assistant_lost_connection: "Connection with the assistant is lost, redirecting you to another assistant...",

    // –ï—â—ë –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
    session_ended: "Your session is over! If you have more questions, you can extend the session.",
    extend_session_button: "Extend",
    im_satisfied: "I am satisfied",
    complain: "Complain - It didn't help",
    assistant_bonus_awarded: "Congratulations! You have been awarded a bonus of %amount% coins for %periodCount% completed dialogues.",
    assistant_bonus_reason: "Bonus for %periodCount% completed dialogues",
    mentor_bonus_awarded: "Congratulations! You have been awarded a mentor bonus of %amount% coins for %periodCount% completed dialogues by your mentee.",
    new_request_from_user: "New request from user",
    accept: "Accept",
    reject: "Reject",
    assistant_blocked_due_to_rejects: "The assistant has been blocked due to exceeding the reject limit.",
    no_assistants_available: "No assistants available.",
    topic_of_request: "Request subject: %subject%",
    no_subject: "No subject for this request.",
    mentor_bonus_reason: "Mentor bonus for %periodCount% completed dialogues by mentee"
  },
} as const;



type TranslationKeys = keyof typeof translations.en;
export type TranslationKey = TranslationKeys;

export function getTranslation(lang: 'ru' | 'en', key: TranslationKey): string {
  return translations[lang][key] || translations['en'][key];
}


/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–∏–∞–ª–æ–≥–µ. 
 * –î–µ–ª–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—Ç–æ–º –µ—â—ë 5 –ø–æ–≤—Ç–æ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 1—Å).
 */

export async function remindAssistant(conversation: Conversation & { assistantRequest: AssistantRequest }) {
  try {
    const assistantTelegramId = conversation.assistantId;
    const requestId = conversation.assistantRequest.id.toString();

    if (!assistantTelegramId) {
      console.log(
        `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: assistantId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –¥–∏–∞–ª–æ–≥–∞ ID: ${conversation.id.toString()}`
      );
      return;
    }

    // 1) –ù–∞—Ö–æ–¥–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –ø–æ telegramId
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: assistantTelegramId },
      select: { language: true },
    });

    // 2) –ï—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (!assistant) {
      console.log(`–í —Ç–∞–±–ª–∏—Ü–µ Assistant –Ω–µ –Ω–∞–π–¥–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å telegramId = ${assistantTelegramId}`);
      return;
    }

    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, assistant.language –º–æ–∂–µ—Ç –±—ã—Ç—å "en", "ru" –∏–ª–∏ –≤–æ–æ–±—â–µ –ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞.
    const recordLang = assistant.language; // —ç—Ç–æ string | null | undefined

    // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é assistantLang —Ç–∏–ø–∞ "en" | "ru".
    let assistantLang: "en" | "ru" = "en"; // fallback

    if (recordLang === "ru") {
      assistantLang = "ru";
    }

    // 4) –¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    //    –î–æ–ø—É—Å—Ç–∏–º, –≤ translations –µ—Å—Ç—å –∫–ª—é—á "assistant_reminder":
    //      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–ø—Ä–æ—Å: %requestId%"
    let reminderText = getTranslation(assistantLang, "assistant_reminder");
    reminderText = reminderText.replace("%requestId%", requestId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    await sendTelegramMessageToAssistant(
      assistantTelegramId.toString(),
      reminderText
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º conversation: —Å—Ç–∞–≤–∏–º reminderSent = true
    await prisma.conversation.update({
      where: { id: conversation.id },
      data: { reminderSent: true },
    });

    console.log(
      `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É ${assistantTelegramId.toString()} –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ${conversation.id.toString()}`
    );

    // 5) –ï—â—ë 5 –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    for (let i = 1; i <= 5; i++) {
      // –î–æ–ø—É—Å—Ç–∏–º, –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º "assistant_reminderNumber":
      //    "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #%number%: –æ—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–ø—Ä–æ—Å: %requestId%"
      let repeatedText = getTranslation(assistantLang, "assistant_reminderNumber");
      repeatedText = repeatedText
        .replace("%requestId%", requestId)
        .replace("%number%", i.toString());

      await sendTelegramMessageToAssistant(
        assistantTelegramId.toString(),
        repeatedText
      );
      console.log(
        `–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—É ${assistantTelegramId.toString()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–º–µ—Ä ${i}`
      );
      // –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ remindAssistant:", error);
    await sendLogToTelegram(`Error in remindAssistant: ${String(error)}`);
  }
}

export async function handleIgnoredConversation(conversation: Conversation & { assistantRequest: AssistantRequest }) {
  try {
    const assistantTelegramId = conversation.assistantId;
    const requestId = conversation.assistantRequest.id.toString();

    if (!assistantTelegramId) {
      console.log(
        `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥: assistantId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –¥–∏–∞–ª–æ–≥–∞ ID: ${conversation.id.toString()}`
      );
      return;
    }

    // 1) –ë–ª–æ–∫–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (isBlocked = true)
    await prisma.assistant.update({
      where: { telegramId: assistantTelegramId },
      data: {
        isBlocked: true,
        unblockDate: null,
        activeConversationId: null,
      },
    });

    console.log(`–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç ${assistantTelegramId.toString()} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.`);

    // 2) –°—á–∏—Ç—ã–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (fallback "en" –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)
    const userRecord = await prisma.user.findUnique({
      where: { telegramId: conversation.userId },
      select: { language: true },
    });

    // –°—É–∂–∞–µ–º –¥–æ "en" | "ru" (–∏–ª–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ–¥ –≤–∞—à–∏ —è–∑—ã–∫–∏). –ù–∏–∂–µ fallback = "en".
    let userLang: "en" | "ru" = "en";
    if (userRecord?.language === "ru") {
      userLang = "ru";
    }

    // –î–æ–ø—É—Å—Ç–∏–º, —É –≤–∞—Å –µ—Å—Ç—å –∫–ª—é—á "assistant_lost_connection" –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
    const lostConnectionMessage = getTranslation(userLang, "assistant_lost_connection");
    await sendTelegramMessageToUser(conversation.userId.toString(), lostConnectionMessage);

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${conversation.userId.toString()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.`);

    // 3) –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä: –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ PENDING, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º userId -> 0, assistantId -> null
    await prisma.conversation.update({
      where: { id: conversation.id },
      data: {
        status: "PENDING",
        userId: BigInt(0),
        assistantId: null,
      },
    });

    // 4) –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    await handleIgnoredRequest(requestId, assistantTelegramId);

    console.log(`–ó–∞–ø—Ä–æ—Å ${requestId} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–µ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleIgnoredConversation:", error);
    await sendLogToTelegram(`Error in handleIgnoredConversation: ${String(error)}`);
  }
}
