generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Admin {
  id        BigInt   @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Moderator {
  id                      BigInt      @id @unique @default(autoincrement())
  login                   String      @unique
  password                String
  role                    String      @default("moderator")
  lastActiveAt            DateTime    @default(now())
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  inviteToken             String?     @unique
  reviewedComplaintsCount Int         @default(0)
  assistantMessagesCount  Int         @default(0)
  userMessagesCount       Int         @default(0)
  username                String      @default("Отсутствует")
  complaints              Complaint[] @relation("ModeratorComplaints")
}

model Invitation {
  id        BigInt   @id @default(autoincrement())
  link      String   @unique
  token     String   @unique
  role      String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  login     String?
  password  String?
}

model Assistant {
  role             String                     @default("assistant")
  isWorking        Boolean                    @default(false)
  isBusy           Boolean                    @default(false)
  startedAt        DateTime?
  joinedAt         DateTime                   @default(now())
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  telegramId       BigInt                     @id @unique
  coins            Int                        @default(0)
  lastActiveAt     DateTime?
  username         String?
  orderNumber      Int?
  avatarFileId     String?
  mentorId         BigInt?
  isBlocked        Boolean                    @default(false)
  unblockDate      DateTime?
  coinTransactions AssistantCoinTransaction[] @relation("AssistantToCoinTransactions")
  requests         AssistantRequest[]
  sessions         AssistantSession[]
  conversations    Conversation[]
  requestActions   RequestAction[]
}

model AssistantSession {
  id          BigInt    @id @default(autoincrement())
  assistantId BigInt
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  assistant   Assistant @relation(fields: [assistantId], references: [telegramId])
}

model User {
  username               String?
  referralCount          Int                @default(0)
  hasUpdatedSubscription Boolean            @default(false)
  totalRequests          Int                @default(0)
  aiRequests             Int                @default(0)
  assistantRequests      Int                @default(0)
  isActiveAIChat         Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  telegramId             BigInt             @id @unique
  coins                  Int                @default(0)
  isWaitingForComplaint  Boolean            @default(false)
  orderNumber            Int?
  paymentSystems         String[]
  usedAIRequests         Int                @default(0)
  isBlocked              Boolean            @default(false)
  unblockDate            DateTime?
  lastPaidSubscriptionId BigInt?
  lastPaidSubscription   Subscription?      @relation("User_lastPaidSubscription", fields: [lastPaidSubscriptionId], references: [id])
  requests               AssistantRequest[]
  conversations          Conversation[]
  referredUsers          Referral?          @relation("Referred")
  referrer               Referral[]         @relation("Referrer")
  
  // Новое поле для хранения процента от приглашенных пользователей
  referralPercentage     Float              @default(0.0)
}

model Subscription {
  id                    BigInt   @id @default(autoincrement())
  name                  String   @unique 
  description           String?
  price                 Float
  allowVoiceToAI        Boolean  @default(false)
  allowVoiceToAssistant Boolean  @default(false)
  allowVideoToAssistant Boolean  @default(false)
  allowFilesToAssistant Boolean  @default(false)
  aiRequestCount        Int
  assistantRequestCount Int?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt

  users                 User[]   @relation("User_lastPaidSubscription")
}



model Referral {
  id             BigInt   @id @default(autoincrement())
  userId         BigInt
  code           String   @unique
  link           String
  createdAt      DateTime @default(now())
  isUsed         Boolean  @default(false)
  referredUserId BigInt?  @unique
  referredUser   User?    @relation("Referred", fields: [referredUserId], references: [telegramId])
  user           User     @relation("Referrer", fields: [userId], references: [telegramId])
}

model Conversation {
  id                     BigInt           @id @default(autoincrement())
  userId                 BigInt
  messages               Json             @default("[]")
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  status                 String           @default("IN_PROGRESS")
  assistantId            BigInt
  requestId              BigInt           @unique
  lastMessageFrom        String           @default("USER")
  assistantResponseTimes Json             @default("[]")
  lastUserMessageAt      DateTime?
  assistant              Assistant        @relation(fields: [assistantId], references: [telegramId])
  assistantRequest       AssistantRequest @relation(fields: [requestId], references: [id])
  user                   User             @relation(fields: [userId], references: [telegramId])
}

model AssistantRequest {
  id                BigInt          @id @default(autoincrement())
  userId            BigInt
  assistantId       BigInt?
  message           String
  status            RequestStatus   @default(PENDING)
  isActive          Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  ignoredAssistants BigInt[]
  assistant         Assistant?      @relation(fields: [assistantId], references: [telegramId])
  user              User            @relation(fields: [userId], references: [telegramId])
  conversation      Conversation?
  requestActions    RequestAction[] @relation("RequestActionsOnAssistantRequest")
}

model WithdrawalRequest {
  id           BigInt   @id @default(autoincrement())
  userId       BigInt
  amount       Float
  status       String   @default("Требует рассмотрения")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userNickname String?
  userRole     String   @default("user")
}

model AssistantCoinTransaction {
  id          BigInt    @id @default(autoincrement())
  assistantId BigInt
  amount      Int
  reason      String
  createdAt   DateTime  @default(now())
  assistant   Assistant @relation("AssistantToCoinTransactions", fields: [assistantId], references: [telegramId])
}



model Complaint {
  id          BigInt     @id @default(autoincrement())
  userId      BigInt
  assistantId BigInt
  text        String
  status      String     @default("PENDING")
  decision    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  photoUrls   String[]
  moderatorId BigInt?
  moderator   Moderator? @relation("ModeratorComplaints", fields: [moderatorId], references: [id])
}

model RequestAction {
  id               BigInt           @id @default(autoincrement())
  requestId        BigInt
  assistantId      BigInt
  action           String
  createdAt        DateTime         @default(now())
  Assistant        Assistant        @relation(fields: [assistantId], references: [telegramId])
  AssistantRequest AssistantRequest @relation("RequestActionsOnAssistantRequest", fields: [requestId], references: [id])
}



enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}
