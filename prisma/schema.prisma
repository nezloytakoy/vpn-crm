generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Admin {
  id        BigInt   @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Moderator {
  id                      BigInt         @id @unique @default(autoincrement())
  login                   String         @unique
  password                String
  inviteToken             String?        @unique
  role                    String         @default("moderator")
  lastActiveAt            DateTime       @default(now())
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  reviewedComplaintsCount Int            @default(0)
  userMessagesCount       Int            @default(0)
  assistantMessagesCount  Int            @default(0)
  username                String         @default("Отсутствует")
  complaints              Complaint[]    @relation("ModeratorComplaints")
}

model Invitation {
  id        BigInt   @id @default(autoincrement()) 
  link      String   @unique
  token     String   @unique
  role      String
  used      Boolean  @default(false)
  login     String? 
  password  String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assistant {
  telegramId             BigInt                     @id @unique
  username               String?
  role                   String                     @default("assistant")
  isWorking              Boolean                    @default(false)
  isBusy                 Boolean                    @default(false)
  startedAt              DateTime?
  joinedAt               DateTime                   @default(now())
  coins                  Int                        @default(0)
  lastActiveAt           DateTime?
  orderNumber            Int?
  avatarFileId           String?
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
  mentorId               BigInt?  
  requests               AssistantRequest[]
  conversations          Conversation[]
  requestActions         RequestAction[]
  sessions               AssistantSession[]
  coinTransactions       AssistantCoinTransaction[] @relation("AssistantToCoinTransactions")

  
  isBlocked              Boolean                    @default(false) 
  unblockDate            DateTime?                                 
}




model AssistantSession {
  id          BigInt    @id @default(autoincrement())
  assistantId BigInt
  assistant   Assistant @relation(fields: [assistantId], references: [telegramId])
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
}


enum SubscriptionType {
  FREE
  FIRST
  SECOND
  THIRD
  FOURTH
}

model AIRequests {
  id                  BigInt          @id @default(autoincrement())
  subscriptionType    SubscriptionType @unique
  assistantRequestCount Int           
  aiRequestCount      Int             

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model User {
  telegramId             BigInt             @id @unique
  username               String?
  referralCount          Int                @default(0) 
  referrer               Referral[]         @relation("Referrer")
  referredUsers          Referral[]         @relation("Referred")
  subscriptionType       SubscriptionType   @default(FREE)
  hasUpdatedSubscription Boolean            @default(false)
  totalRequests          Int                @default(0)
  aiRequests             Int                @default(0)        
  usedAIRequests         Int                @default(0)        
  assistantRequests      Int                @default(0)
  coins                  Int                @default(0)
  isActiveAIChat         Boolean            @default(false)
  orderNumber            Int?               
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  conversations          Conversation[]
  requests               AssistantRequest[]
  isWaitingForComplaint  Boolean            @default(false)
  paymentSystems         String[]           

  
  isBlocked              Boolean            @default(false)  
  unblockDate            DateTime?                          
}



model Referral {
  id             BigInt   @id @default(autoincrement())
  user           User     @relation("Referrer", fields: [userId], references: [telegramId])
  userId         BigInt
  referredUser   User?    @relation("Referred", fields: [referredUserId], references: [telegramId])
  referredUserId BigInt?  @unique
  code           String   @unique
  link           String
  isUsed         Boolean  @default(false)  
  createdAt      DateTime @default(now())
}




model Conversation {
  id                    BigInt            @id @default(autoincrement())
  user                  User              @relation(fields: [userId], references: [telegramId])
  userId                BigInt
  assistant             Assistant         @relation(fields: [assistantId], references: [telegramId])
  assistantId           BigInt
  messages              Json              @default("[]")
  requestId             BigInt            @unique
  assistantRequest      AssistantRequest? @relation(fields: [requestId], references: [id])
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  status                String            @default("IN_PROGRESS")
  lastMessageFrom       String            @default("USER") 
  assistantResponseTimes Json             @default("[]") 
  lastUserMessageAt     DateTime?         
}




model AssistantRequest {
  id               BigInt            @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [telegramId])
  userId           BigInt
  assistant        Assistant?        @relation(fields: [assistantId], references: [telegramId])
  assistantId      BigInt?
  message          String
  status           RequestStatus     @default(PENDING)
  isActive         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  ignoredAssistants BigInt[]
  requestActions   RequestAction[]   @relation("RequestActionsOnAssistantRequest")
  conversation     Conversation?     
}




enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}


model WithdrawalRequest {
  id           BigInt   @id @default(autoincrement())
  userId       BigInt
  userNickname String?
  userRole     String   @default("user")
  amount       Float
  status       String   @default("Требует рассмотрения")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AssistantCoinTransaction {
  id          BigInt    @id @default(autoincrement())
  assistantId BigInt
  assistant   Assistant @relation("AssistantToCoinTransactions", fields: [assistantId], references: [telegramId])
  amount      Int
  reason      String
  createdAt   DateTime  @default(now())
}

model Tariff {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Complaint {
  id            BigInt      @id @default(autoincrement())
  userId        BigInt
  assistantId   BigInt
  text          String
  status        String      @default("PENDING")
  decision      String?
  photoUrls     String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  moderatorId   BigInt?     
  moderator     Moderator?  @relation("ModeratorComplaints", fields: [moderatorId], references: [id])
}
model RequestAction {
  id               BigInt          @id @default(autoincrement())
  requestId        BigInt
  assistantId      BigInt
  action           String
  createdAt        DateTime        @default(now())
  Assistant        Assistant       @relation(fields: [assistantId], references: [telegramId])
  AssistantRequest AssistantRequest @relation(fields: [requestId], references: [id], name: "RequestActionsOnAssistantRequest") 
}
